-- JSON_OBJECT()
SELECT JSON_OBJECT();
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING json);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING json FORMAT JSON);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING json FORMAT JSONB);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING jsonb);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING jsonb FORMAT JSON);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING jsonb FORMAT JSONB);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text FORMAT JSON);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING UTF8);
ERROR:  cannot set JSON encoding for non-bytea output types
SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING INVALID_ENCODING);
ERROR:  unrecognized JSON encoding: invalid_encoding
SELECT JSON_OBJECT(RETURNING text FORMAT JSONB);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text FORMAT JSONB ENCODING UTF8);
ERROR:  syntax error at or near "ENCODING"
LINE 1: SELECT JSON_OBJECT(RETURNING text FORMAT JSONB ENCODING UTF8...
                                                       ^
SELECT JSON_OBJECT(RETURNING bytea);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF8);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF16);
ERROR:  invalid destination encoding name "UTF16"
SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF32);
ERROR:  invalid destination encoding name "UTF32"
SELECT JSON_OBJECT(RETURNING bytea FORMAT JSONB);
  ?column?  
------------
 \x00000020
(1 row)

SELECT JSON_OBJECT(NULL: 1);
ERROR:  argument 3 cannot be null
HINT:  Object keys should be text.
SELECT JSON_OBJECT('a': 2 + 3);
 ?column?  
-----------
 {"a" : 5}
(1 row)

SELECT JSON_OBJECT('a' VALUE 2 + 3);
 ?column?  
-----------
 {"a" : 5}
(1 row)

--SELECT JSON_OBJECT(KEY 'a' VALUE 2 + 3);
SELECT JSON_OBJECT('a' || 2: 1);
  ?column?  
------------
 {"a2" : 1}
(1 row)

SELECT JSON_OBJECT('a' || 2 VALUE 1);
   ?column?   
--------------
 {"a2" : "1"}
(1 row)

--SELECT JSON_OBJECT(KEY 'a' || 2 VALUE 1);
SELECT JSON_OBJECT('a': 2::text);
  ?column?   
-------------
 {"a" : "2"}
(1 row)

SELECT JSON_OBJECT('a' VALUE 2::text);
  ?column?   
-------------
 {"a" : "2"}
(1 row)

--SELECT JSON_OBJECT(KEY 'a' VALUE 2::text);
SELECT JSON_OBJECT(1::text: 2);
 ?column?  
-----------
 {"1" : 2}
(1 row)

SELECT JSON_OBJECT(1::text VALUE 2);
 ?column?  
-----------
 {"1" : 2}
(1 row)

--SELECT JSON_OBJECT(KEY 1::text VALUE 2);
SELECT JSON_OBJECT(json '[1]': 123);
ERROR:  key value must be scalar, not array, composite, or json
SELECT JSON_OBJECT(ARRAY[1,2,3]: 'aaa');
ERROR:  key value must be scalar, not array, composite, or json
SELECT JSON_OBJECT(
	'a': '123',
	1.23: 123,
	'c': json '[ 1,true,{ } ]',
	'd': jsonb '{ "x" : 123.45 }'
);
                                ?column?                                
------------------------------------------------------------------------
 {"a" : "123", "1.23" : 123, "c" : [ 1,true,{ } ], "d" : {"x": 123.45}}
(1 row)

SELECT JSON_OBJECT(
	'a': '123',
	1.23: 123,
	'c': json '[ 1,true,{ } ]',
	'd': jsonb '{ "x" : 123.45 }'
	RETURNING jsonb
);
                             ?column?                              
-------------------------------------------------------------------
 {"a": "123", "c": [1, true, {}], "d": {"x": 123.45}, "1.23": 123}
(1 row)

/*
SELECT JSON_OBJECT(
	'a': '123',
	KEY 1.23 VALUE 123,
	'c' VALUE json '[1, true, {}]'
);
*/
SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa'));
                   ?column?                    
-----------------------------------------------
 {"a" : "123", "b" : {"a" : 111, "b" : "aaa"}}
(1 row)

SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa' RETURNING jsonb));
                  ?column?                   
---------------------------------------------
 {"a" : "123", "b" : {"a": 111, "b": "aaa"}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text));
       ?column?        
-----------------------
 {"a" : "{\"b\" : 1}"}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text) FORMAT JSON);
     ?column?      
-------------------
 {"a" : {"b" : 1}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text) FORMAT JSONB);
     ?column?     
------------------
 {"a" : {"b": 1}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea));
            ?column?             
---------------------------------
 {"a" : "\\x7b226222203a20317d"}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea) FORMAT JSON);
     ?column?      
-------------------
 {"a" : {"b" : 1}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea FORMAT JSONB));
                           ?column?                            
---------------------------------------------------------------
 {"a" : "\\x01000020010000800b000010620000002000000000800100"}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea FORMAT JSONB) FORMAT JSONB);
     ?column?     
------------------
 {"a" : {"b": 1}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea FORMAT JSON) FORMAT JSONB);
ERROR:  incorrect jsonb binary data format
SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2);
             ?column?             
----------------------------------
 {"a" : "1", "b" : null, "c" : 2}
(1 row)

SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 NULL ON NULL);
             ?column?             
----------------------------------
 {"a" : "1", "b" : null, "c" : 2}
(1 row)

SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 ABSENT ON NULL);
       ?column?       
----------------------
 {"a" : "1", "c" : 2}
(1 row)

SELECT JSON_OBJECT(1: 1, '1': NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '1': NULL ABSENT ON NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '1': NULL NULL ON NULL WITH UNIQUE RETURNING jsonb);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '1': NULL ABSENT ON NULL WITH UNIQUE RETURNING jsonb);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 NULL ON NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE);
      ?column?      
--------------------
 {"1" : 1, "1" : 1}
(1 row)

SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITH UNIQUE RETURNING jsonb);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE RETURNING jsonb);
 ?column? 
----------
 {"1": 1}
(1 row)

SELECT JSON_OBJECT(1: 1, '2': NULL, '3': 1, 4: NULL, '5': 'a' ABSENT ON NULL WITH UNIQUE RETURNING jsonb);
          ?column?          
----------------------------
 {"1": 1, "3": 1, "5": "a"}
(1 row)

-- JSON_ARRAY()
SELECT JSON_ARRAY();
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING json);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING json FORMAT JSON);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING json FORMAT JSONB);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING jsonb);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING jsonb FORMAT JSON);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING jsonb FORMAT JSONB);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text FORMAT JSON);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING UTF8);
ERROR:  cannot set JSON encoding for non-bytea output types
SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING INVALID_ENCODING);
ERROR:  unrecognized JSON encoding: invalid_encoding
SELECT JSON_ARRAY(RETURNING text FORMAT JSONB);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text FORMAT JSONB ENCODING UTF8);
ERROR:  syntax error at or near "ENCODING"
LINE 1: SELECT JSON_ARRAY(RETURNING text FORMAT JSONB ENCODING UTF8)...
                                                      ^
SELECT JSON_ARRAY(RETURNING bytea);
 ?column? 
----------
 \x5b5d
(1 row)

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON);
 ?column? 
----------
 \x5b5d
(1 row)

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF8);
 ?column? 
----------
 \x5b5d
(1 row)

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF16);
ERROR:  invalid destination encoding name "UTF16"
SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF32);
ERROR:  invalid destination encoding name "UTF32"
SELECT JSON_ARRAY(RETURNING bytea FORMAT JSONB);
  ?column?  
------------
 \x00000040
(1 row)

SELECT JSON_ARRAY('aaa', 111, true, array[1,2,3], NULL, json '{"a": [1]}', jsonb '["a",3]');
                     ?column?                      
---------------------------------------------------
 ["aaa", 111, true, [1,2,3], {"a": [1]}, ["a", 3]]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL);
     ?column?     
------------------
 ["a", null, "b"]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL);
  ?column?  
------------
 ["a", "b"]
(1 row)

SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL);
 ?column? 
----------
 ["b"]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL RETURNING jsonb);
     ?column?     
------------------
 ["a", null, "b"]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL RETURNING jsonb);
  ?column?  
------------
 ["a", "b"]
(1 row)

SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL RETURNING jsonb);
 ?column? 
----------
 ["b"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' RETURNING text));
           ?column?            
-------------------------------
 ["[\"{ \\\"a\\\" : 123 }\"]"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text));
       ?column?        
-----------------------
 ["[{ \"a\" : 123 }]"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text) FORMAT JSON);
     ?column?      
-------------------
 [[{ "a" : 123 }]]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text) FORMAT JSONB);
    ?column?    
----------------
 [[{"a": 123}]]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING bytea FORMAT JSONB));
                                ?column?                                 
-------------------------------------------------------------------------
 ["\\x01000040180000d001000020010000800b000010610000002000000000807b00"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING bytea FORMAT JSONB) FORMAT JSONB);
    ?column?    
----------------
 [[{"a": 123}]]
(1 row)

SELECT JSON_ARRAY(SELECT i FROM (VALUES (1), (2), (NULL), (4)) foo(i));
 ?column?  
-----------
 [1, 2, 4]
(1 row)

SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i));
 ?column? 
----------
 [[1,2], +
  [3,4]]
(1 row)

SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i) RETURNING jsonb);
     ?column?     
------------------
 [[1, 2], [3, 4]]
(1 row)

--SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i) NULL ON NULL);
--SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i) NULL ON NULL RETURNING jsonb);
SELECT JSON_ARRAY(SELECT i FROM (VALUES (3), (1), (NULL), (2)) foo(i) ORDER BY i);
 ?column?  
-----------
 [1, 2, 3]
(1 row)

-- JSON_ARRAYAGG()
SELECT	JSON_ARRAYAGG(i) IS NULL,
		JSON_ARRAYAGG(i RETURNING jsonb) IS NULL
FROM generate_series(1, 0) i;
 ?column? | ?column? 
----------+----------
 t        | t
(1 row)

SELECT	JSON_ARRAYAGG(i),
		JSON_ARRAYAGG(i RETURNING jsonb)
FROM generate_series(1, 5) i;
    ?column?     |    ?column?     
-----------------+-----------------
 [1, 2, 3, 4, 5] | [1, 2, 3, 4, 5]
(1 row)

SELECT JSON_ARRAYAGG(i ORDER BY i DESC)
FROM generate_series(1, 5) i;
    ?column?     
-----------------
 [5, 4, 3, 2, 1]
(1 row)

SELECT JSON_ARRAYAGG(i::text::json)
FROM generate_series(1, 5) i;
    ?column?     
-----------------
 [1, 2, 3, 4, 5]
(1 row)

SELECT JSON_ARRAYAGG(JSON_ARRAY(i, i + 1 RETURNING text) FORMAT JSON)
FROM generate_series(1, 5) i;
                 ?column?                 
------------------------------------------
 [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]
(1 row)

SELECT	JSON_ARRAYAGG(NULL),
		JSON_ARRAYAGG(NULL RETURNING jsonb)
FROM generate_series(1, 5);
 ?column? | ?column? 
----------+----------
 []       | []
(1 row)

SELECT	JSON_ARRAYAGG(NULL NULL ON NULL),
		JSON_ARRAYAGG(NULL NULL ON NULL RETURNING jsonb)
FROM generate_series(1, 5);
            ?column?            |            ?column?            
--------------------------------+--------------------------------
 [null, null, null, null, null] | [null, null, null, null, null]
(1 row)

SELECT
	JSON_ARRAYAGG(bar),
	JSON_ARRAYAGG(bar RETURNING jsonb),
	JSON_ARRAYAGG(bar ABSENT ON NULL),
	JSON_ARRAYAGG(bar ABSENT ON NULL RETURNING jsonb),
	JSON_ARRAYAGG(bar NULL ON NULL),
	JSON_ARRAYAGG(bar NULL ON NULL RETURNING jsonb),
	JSON_ARRAYAGG(foo),
	JSON_ARRAYAGG(foo RETURNING jsonb),
	JSON_ARRAYAGG(foo ORDER BY bar) FILTER (WHERE bar > 2),
	JSON_ARRAYAGG(foo ORDER BY bar RETURNING jsonb) FILTER (WHERE bar > 2)
FROM
	(VALUES (NULL), (3), (1), (NULL), (NULL), (5), (2), (4), (NULL)) foo(bar);
    ?column?     |    ?column?     |    ?column?     |    ?column?     |                ?column?                 |                ?column?                 |    ?column?     |                                                         ?column?                                                         |   ?column?   |               ?column?               
-----------------+-----------------+-----------------+-----------------+-----------------------------------------+-----------------------------------------+-----------------+--------------------------------------------------------------------------------------------------------------------------+--------------+--------------------------------------
 [3, 1, 5, 2, 4] | [3, 1, 5, 2, 4] | [3, 1, 5, 2, 4] | [3, 1, 5, 2, 4] | [null, 3, 1, null, null, 5, 2, 4, null] | [null, 3, 1, null, null, 5, 2, 4, null] | [{"bar":null}, +| [{"bar": null}, {"bar": 3}, {"bar": 1}, {"bar": null}, {"bar": null}, {"bar": 5}, {"bar": 2}, {"bar": 4}, {"bar": null}] | [{"bar":3}, +| [{"bar": 3}, {"bar": 4}, {"bar": 5}]
                 |                 |                 |                 |                                         |                                         |  {"bar":3},    +|                                                                                                                          |  {"bar":4}, +| 
                 |                 |                 |                 |                                         |                                         |  {"bar":1},    +|                                                                                                                          |  {"bar":5}]  | 
                 |                 |                 |                 |                                         |                                         |  {"bar":null}, +|                                                                                                                          |              | 
                 |                 |                 |                 |                                         |                                         |  {"bar":null}, +|                                                                                                                          |              | 
                 |                 |                 |                 |                                         |                                         |  {"bar":5},    +|                                                                                                                          |              | 
                 |                 |                 |                 |                                         |                                         |  {"bar":2},    +|                                                                                                                          |              | 
                 |                 |                 |                 |                                         |                                         |  {"bar":4},    +|                                                                                                                          |              | 
                 |                 |                 |                 |                                         |                                         |  {"bar":null}]  |                                                                                                                          |              | 
(1 row)

-- JSON_OBJECTAGG()
SELECT	JSON_OBJECTAGG('key': 1) IS NULL,
		JSON_OBJECTAGG('key': 1 RETURNING jsonb) IS NULL
WHERE FALSE;
 ?column? | ?column? 
----------+----------
 t        | t
(1 row)

SELECT JSON_OBJECTAGG(NULL: 1);
ERROR:  field name must not be null
SELECT JSON_OBJECTAGG(NULL: 1 RETURNING jsonb);
ERROR:  field name must not be null
SELECT
	JSON_OBJECTAGG(i: i),
--	JSON_OBJECTAGG(i VALUE i),
--	JSON_OBJECTAGG(KEY i VALUE i),
	JSON_OBJECTAGG(i: i RETURNING jsonb)
FROM
	generate_series(1, 5) i;
                    ?column?                     |                 ?column?                 
-------------------------------------------------+------------------------------------------
 { "1" : 1, "2" : 2, "3" : 3, "4" : 4, "5" : 5 } | {"1": 1, "2": 2, "3": 3, "4": 4, "5": 5}
(1 row)

SELECT
	JSON_OBJECTAGG(k: v),
	JSON_OBJECTAGG(k: v NULL ON NULL),
	JSON_OBJECTAGG(k: v ABSENT ON NULL),
	JSON_OBJECTAGG(k: v RETURNING jsonb),
	JSON_OBJECTAGG(k: v NULL ON NULL RETURNING jsonb),
	JSON_OBJECTAGG(k: v ABSENT ON NULL RETURNING jsonb)
FROM
	(VALUES (1, 1), (1, NULL), (2, NULL), (3, 3)) foo(k, v);
                   ?column?                   |                   ?column?                   |       ?column?       |            ?column?            |            ?column?            |     ?column?     
----------------------------------------------+----------------------------------------------+----------------------+--------------------------------+--------------------------------+------------------
 { "1" : 1, "1" : null, "2" : null, "3" : 3 } | { "1" : 1, "1" : null, "2" : null, "3" : 3 } | { "1" : 1, "3" : 3 } | {"1": null, "2": null, "3": 3} | {"1": null, "2": null, "3": 3} | {"1": 1, "3": 3}
(1 row)

SELECT JSON_OBJECTAGG(k: v WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (0, NULL), (3, NULL), (2, 2), (4, NULL)) foo(k, v);
       ?column?       
----------------------
 { "1" : 1, "2" : 2 }
(1 row)

SELECT JSON_OBJECTAGG(k: v WITH UNIQUE KEYS RETURNING jsonb)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS RETURNING jsonb)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v);
ERROR:  duplicate JSON key "1"
-- IS JSON predicate
SELECT NULL IS JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL IS NOT JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL::json IS JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL::jsonb IS JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL::text IS JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL::bytea IS JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL::int IS JSON;
ERROR:  cannot use type integer in IS JSON predicate
SELECT '' FORMAT JSONB IS JSON;
ERROR:  cannot use FORMAT JSONB for string input types
SELECT bytea '\x00' IS JSON;
ERROR:  invalid byte sequence for encoding "UTF8": 0x00
SELECT bytea '\x00' FORMAT JSON IS JSON;
ERROR:  invalid byte sequence for encoding "UTF8": 0x00
SELECT bytea '\x00' FORMAT JSONB IS JSON;
 ?column? 
----------
 f
(1 row)

CREATE TABLE test_is_json (js text);
INSERT INTO test_is_json VALUES
 (NULL),
 (''),
 ('123'),
 ('"aaa "'),
 ('true'),
 ('null'),
 ('[]'),
 ('[1, "2", {}]'),
 ('{}'),
 ('{ "a": 1, "b": null }'),
 ('{ "a": 1, "a": null }'),
 ('{ "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }'),
 ('{ "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] }'),
 ('aaa'),
 ('{a:1}'),
 ('["a",]');
SELECT
	js,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE",
	js FORMAT JSON IS JSON "FORMAT JSON IS JSON"
FROM
	test_is_json;
                      js                       | IS JSON | IS NOT JSON | IS VALUE | IS OBJECT | IS ARRAY | IS SCALAR | WITHOUT UNIQUE | WITH UNIQUE | FORMAT JSON IS JSON 
-----------------------------------------------+---------+-------------+----------+-----------+----------+-----------+----------------+-------------+---------------------
                                               |         |             |          |           |          |           |                |             | 
                                               | f       | t           | f        | f         | f        | f         | f              | f           | f
 123                                           | t       | f           | t        | f         | f        | t         | t              | t           | t
 "aaa "                                        | t       | f           | t        | f         | f        | t         | t              | t           | t
 true                                          | t       | f           | t        | f         | f        | t         | t              | t           | t
 null                                          | t       | f           | t        | f         | f        | t         | t              | t           | t
 []                                            | t       | f           | t        | f         | t        | f         | t              | t           | t
 [1, "2", {}]                                  | t       | f           | t        | f         | t        | f         | t              | t           | t
 {}                                            | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "b": null }                         | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "a": null }                         | t       | f           | t        | t         | f        | f         | t              | f           | t
 { "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }     | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] } | t       | f           | t        | t         | f        | f         | t              | f           | t
 aaa                                           | f       | t           | f        | f         | f        | f         | f              | f           | f
 {a:1}                                         | f       | t           | f        | f         | f        | f         | f              | f           | f
 ["a",]                                        | f       | t           | f        | f         | f        | f         | f              | f           | f
(16 rows)

SELECT
	js,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE",
	js FORMAT JSON IS JSON "FORMAT JSON IS JSON"
FROM
	(SELECT js::json FROM test_is_json WHERE js IS JSON) foo(js);
                      js                       | IS JSON | IS NOT JSON | IS VALUE | IS OBJECT | IS ARRAY | IS SCALAR | WITHOUT UNIQUE | WITH UNIQUE | FORMAT JSON IS JSON 
-----------------------------------------------+---------+-------------+----------+-----------+----------+-----------+----------------+-------------+---------------------
 123                                           | t       | f           | t        | f         | f        | t         | t              | t           | t
 "aaa "                                        | t       | f           | t        | f         | f        | t         | t              | t           | t
 true                                          | t       | f           | t        | f         | f        | t         | t              | t           | t
 null                                          | t       | f           | t        | f         | f        | t         | t              | t           | t
 []                                            | t       | f           | t        | f         | t        | f         | t              | t           | t
 [1, "2", {}]                                  | t       | f           | t        | f         | t        | f         | t              | t           | t
 {}                                            | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "b": null }                         | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "a": null }                         | t       | f           | t        | t         | f        | f         | t              | f           | t
 { "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }     | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] } | t       | f           | t        | t         | f        | f         | t              | f           | t
(11 rows)

SELECT
	js0,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE",
	js FORMAT JSON IS JSON "FORMAT JSON IS JSON",
	js FORMAT JSONB IS JSON "FORMAT JSONB IS JSON"
FROM
	(SELECT js, js::bytea FROM test_is_json WHERE js IS JSON) foo(js0, js);
                      js0                      | IS JSON | IS NOT JSON | IS VALUE | IS OBJECT | IS ARRAY | IS SCALAR | WITHOUT UNIQUE | WITH UNIQUE | FORMAT JSON IS JSON | FORMAT JSONB IS JSON 
-----------------------------------------------+---------+-------------+----------+-----------+----------+-----------+----------------+-------------+---------------------+----------------------
 123                                           | t       | f           | t        | f         | f        | t         | t              | t           | t                   | f
 "aaa "                                        | t       | f           | t        | f         | f        | t         | t              | t           | t                   | f
 true                                          | t       | f           | t        | f         | f        | t         | t              | t           | t                   | f
 null                                          | t       | f           | t        | f         | f        | t         | t              | t           | t                   | f
 []                                            | t       | f           | t        | f         | t        | f         | t              | t           | t                   | f
 [1, "2", {}]                                  | t       | f           | t        | f         | t        | f         | t              | t           | t                   | f
 {}                                            | t       | f           | t        | t         | f        | f         | t              | t           | t                   | f
 { "a": 1, "b": null }                         | t       | f           | t        | t         | f        | f         | t              | t           | t                   | f
 { "a": 1, "a": null }                         | t       | f           | t        | t         | f        | f         | t              | f           | t                   | f
 { "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }     | t       | f           | t        | t         | f        | f         | t              | t           | t                   | f
 { "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] } | t       | f           | t        | t         | f        | f         | t              | f           | t                   | f
(11 rows)

SELECT
	js,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE",
	js FORMAT JSON IS JSON "FORMAT JSON IS JSON"
FROM
	(SELECT js::jsonb FROM test_is_json WHERE js IS JSON) foo(js);
                 js                  | IS JSON | IS NOT JSON | IS VALUE | IS OBJECT | IS ARRAY | IS SCALAR | WITHOUT UNIQUE | WITH UNIQUE | FORMAT JSON IS JSON 
-------------------------------------+---------+-------------+----------+-----------+----------+-----------+----------------+-------------+---------------------
 123                                 | t       | f           | t        | f         | f        | t         | t              | t           | t
 "aaa "                              | t       | f           | t        | f         | f        | t         | t              | t           | t
 true                                | t       | f           | t        | f         | f        | t         | t              | t           | t
 null                                | t       | f           | t        | f         | f        | t         | t              | t           | t
 []                                  | t       | f           | t        | f         | t        | f         | t              | t           | t
 [1, "2", {}]                        | t       | f           | t        | f         | t        | f         | t              | t           | t
 {}                                  | t       | f           | t        | t         | f        | f         | t              | t           | t
 {"a": 1, "b": null}                 | t       | f           | t        | t         | f        | f         | t              | t           | t
 {"a": null}                         | t       | f           | t        | t         | f        | f         | t              | t           | t
 {"a": 1, "b": [{"a": 1}, {"a": 2}]} | t       | f           | t        | t         | f        | f         | t              | t           | t
 {"a": 1, "b": [{"a": 2, "b": 0}]}   | t       | f           | t        | t         | f        | f         | t              | t           | t
(11 rows)

SELECT
	js0,
	js FORMAT JSONB IS JSON "IS JSON",
	js FORMAT JSONB IS NOT JSON "IS NOT JSON",
	js FORMAT JSONB IS JSON VALUE "IS VALUE",
	js FORMAT JSONB IS JSON OBJECT "IS OBJECT",
	js FORMAT JSONB IS JSON ARRAY "IS ARRAY",
	js FORMAT JSONB IS JSON SCALAR "IS SCALAR",
	js FORMAT JSONB IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js FORMAT JSONB IS JSON WITH UNIQUE KEYS "WITH UNIQUE"
FROM
	(SELECT js, js::jsonb::bytea FROM test_is_json WHERE js IS JSON) foo(js0, js);
                      js0                      | IS JSON | IS NOT JSON | IS VALUE | IS OBJECT | IS ARRAY | IS SCALAR | WITHOUT UNIQUE | WITH UNIQUE 
-----------------------------------------------+---------+-------------+----------+-----------+----------+-----------+----------------+-------------
 123                                           | t       | f           | t        | f         | f        | t         | t              | t
 "aaa "                                        | t       | f           | t        | f         | f        | t         | t              | t
 true                                          | t       | f           | t        | f         | f        | t         | t              | t
 null                                          | t       | f           | t        | f         | f        | t         | t              | t
 []                                            | t       | f           | t        | f         | t        | f         | t              | t
 [1, "2", {}]                                  | t       | f           | t        | f         | t        | f         | t              | t
 {}                                            | t       | f           | t        | t         | f        | f         | t              | t
 { "a": 1, "b": null }                         | t       | f           | t        | t         | f        | f         | t              | t
 { "a": 1, "a": null }                         | t       | f           | t        | t         | f        | f         | t              | t
 { "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }     | t       | f           | t        | t         | f        | f         | t              | t
 { "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] } | t       | f           | t        | t         | f        | f         | t              | t
(11 rows)

--jsonpath io
select '$'::jsonpath;
 jsonpath 
----------
 $
(1 row)

select '$.a'::jsonpath;
 jsonpath 
----------
 $."a"
(1 row)

select '$.a.v'::jsonpath;
 jsonpath  
-----------
 $."a"."v"
(1 row)

select '$.a.*'::jsonpath;
 jsonpath 
----------
 $."a".*
(1 row)

select '$.*.[*]'::jsonpath;
 jsonpath 
----------
 $.*.[*]
(1 row)

select '$.*[*]'::jsonpath;
 jsonpath 
----------
 $.*.[*]
(1 row)

select '$.a.[*]'::jsonpath;
 jsonpath  
-----------
 $."a".[*]
(1 row)

select '$.a[*]'::jsonpath;
 jsonpath  
-----------
 $."a".[*]
(1 row)

select '$.a.[*][*]'::jsonpath;
   jsonpath    
---------------
 $."a".[*].[*]
(1 row)

select '$.a.[*].[*]'::jsonpath;
   jsonpath    
---------------
 $."a".[*].[*]
(1 row)

select '$.a[*][*]'::jsonpath;
   jsonpath    
---------------
 $."a".[*].[*]
(1 row)

select '$.a[*].[*]'::jsonpath;
   jsonpath    
---------------
 $."a".[*].[*]
(1 row)

select '$.g ? (@ = 1)'::jsonpath;
   jsonpath    
---------------
 $."g"?(@ = 1)
(1 row)

select '$.g ? (a = 1)'::jsonpath;
    jsonpath     
-----------------
 $."g"?("a" = 1)
(1 row)

select '$.g ? (.a = 1)'::jsonpath;
    jsonpath     
-----------------
 $."g"?("a" = 1)
(1 row)

select '$.g ? (@.a = 1)'::jsonpath;
     jsonpath      
-------------------
 $."g"?(@."a" = 1)
(1 row)

select '$.g ? (@.a = 1 || a = 4)'::jsonpath;
            jsonpath            
--------------------------------
 $."g"?((@."a" = 1 || "a" = 4))
(1 row)

select '$.g ? (@.a = 1 && a = 4)'::jsonpath;
            jsonpath            
--------------------------------
 $."g"?((@."a" = 1 && "a" = 4))
(1 row)

select '$.g ? (@.a = 1 || a = 4 && b = 7)'::jsonpath;
                  jsonpath                   
---------------------------------------------
 $."g"?((@."a" = 1 || ("a" = 4 && "b" = 7)))
(1 row)

select '$.g ? (@.a = 1 || !a = 4 && b = 7)'::jsonpath;
                    jsonpath                    
------------------------------------------------
 $."g"?((@."a" = 1 || ((!"a" = 4) && "b" = 7)))
(1 row)

select '$.g ? (@.a = 1 || !(x >= 123 || a = 4) && b = 7)'::jsonpath;
                            jsonpath                            
----------------------------------------------------------------
 $."g"?((@."a" = 1 || ((!("x" >= 123 || "a" = 4)) && "b" = 7)))
(1 row)

select '$.g ? (zip = $zip)'::jsonpath;
        jsonpath        
------------------------
 $."g"?("zip" = $"zip")
(1 row)

select '$ ? (a < 1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < -1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < -1)
(1 row)

select '$ ? (a < +1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < .1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < -.1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < -0.1)
(1 row)

select '$ ? (a < +.1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < 0.1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < -0.1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < -0.1)
(1 row)

select '$ ? (a < +0.1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < 10.1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 10.1)
(1 row)

select '$ ? (a < -10.1)'::jsonpath;
    jsonpath     
-----------------
 $?("a" < -10.1)
(1 row)

select '$ ? (a < +10.1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 10.1)
(1 row)

select '$ ? (a < 1e1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < 10)
(1 row)

select '$ ? (a < -1e1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < -10)
(1 row)

select '$ ? (a < +1e1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < 10)
(1 row)

select '$ ? (a < .1e1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < -.1e1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < -1)
(1 row)

select '$ ? (a < +.1e1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < 0.1e1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < -0.1e1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < -1)
(1 row)

select '$ ? (a < +0.1e1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < 10.1e1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 101)
(1 row)

select '$ ? (a < -10.1e1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < -101)
(1 row)

select '$ ? (a < +10.1e1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 101)
(1 row)

select '$ ? (a < 1e-1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < -1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < -0.1)
(1 row)

select '$ ? (a < +1e-1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < .1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 0.01)
(1 row)

select '$ ? (a < -.1e-1)'::jsonpath;
    jsonpath     
-----------------
 $?("a" < -0.01)
(1 row)

select '$ ? (a < +.1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 0.01)
(1 row)

select '$ ? (a < 0.1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 0.01)
(1 row)

select '$ ? (a < -0.1e-1)'::jsonpath;
    jsonpath     
-----------------
 $?("a" < -0.01)
(1 row)

select '$ ? (a < +0.1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 0.01)
(1 row)

select '$ ? (a < 10.1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 1.01)
(1 row)

select '$ ? (a < -10.1e-1)'::jsonpath;
    jsonpath     
-----------------
 $?("a" < -1.01)
(1 row)

select '$ ? (a < +10.1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 1.01)
(1 row)

select '$ ? (a < 1e+1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < 10)
(1 row)

select '$ ? (a < -1e+1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < -10)
(1 row)

select '$ ? (a < +1e+1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < 10)
(1 row)

select '$ ? (a < .1e+1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < -.1e+1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < -1)
(1 row)

select '$ ? (a < +.1e+1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < 0.1e+1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < -0.1e+1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < -1)
(1 row)

select '$ ? (a < +0.1e+1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < 10.1e+1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 101)
(1 row)

select '$ ? (a < -10.1e+1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < -101)
(1 row)

select '$ ? (a < +10.1e+1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 101)
(1 row)

select _jsonpath_exist('$.a.b', '{"a": 12}');
 _jsonpath_exist 
-----------------
 f
(1 row)

select _jsonpath_exist('$.b', '{"a": 12}');
 _jsonpath_exist 
-----------------
 f
(1 row)

select _jsonpath_exist('$.a.a', '{"a": {"a": 12}}');
 _jsonpath_exist 
-----------------
 t
(1 row)

select _jsonpath_exist('$.*.a', '{"a": {"a": 12}}');
 _jsonpath_exist 
-----------------
 t
(1 row)

select _jsonpath_exist('$.*.a', '{"b": {"a": 12}}');
 _jsonpath_exist 
-----------------
 t
(1 row)

select _jsonpath_exist('$.*', '{}');
 _jsonpath_exist 
-----------------
 f
(1 row)

select _jsonpath_exist('$.*', '{"a": 1}');
 _jsonpath_exist 
-----------------
 t
(1 row)

select _jsonpath_exist('$.[*]', '[]');
 _jsonpath_exist 
-----------------
 f
(1 row)

select _jsonpath_exist('$.[*]', '[1]');
 _jsonpath_exist 
-----------------
 t
(1 row)

select * from _jsonpath_object('$.a', '{"a": 12, "b": {"a": 13}}');
 _jsonpath_object 
------------------
 12
(1 row)

select * from _jsonpath_object('$.b', '{"a": 12, "b": {"a": 13}}');
 _jsonpath_object 
------------------
 {"a": 13}
(1 row)

select * from _jsonpath_object('$.*', '{"a": 12, "b": {"a": 13}}');
 _jsonpath_object 
------------------
 12
 {"a": 13}
(2 rows)

select * from _jsonpath_object('$.*.a', '{"a": 12, "b": {"a": 13}}');
 _jsonpath_object 
------------------
 13
(1 row)

select * from _jsonpath_object('$.[*].a', '[12, {"a": 13}, {"b": 14}]');
 _jsonpath_object 
------------------
 13
(1 row)

select * from _jsonpath_object('$.[*].*', '[12, {"a": 13}, {"b": 14}]');
 _jsonpath_object 
------------------
 13
 14
(2 rows)

