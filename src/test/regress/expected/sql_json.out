-- JSON_OBJECT()
SELECT JSON_OBJECT();
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING json);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING json FORMAT JSON);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING json FORMAT JSONB);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING jsonb);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING jsonb FORMAT JSON);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING jsonb FORMAT JSONB);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text FORMAT JSON);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING UTF8);
ERROR:  cannot set JSON encoding for non-bytea output types
LINE 1: SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING UTF8)...
                                          ^
SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING INVALID_ENCODING);
ERROR:  unrecognized JSON encoding: invalid_encoding
SELECT JSON_OBJECT(RETURNING text FORMAT JSONB);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text FORMAT JSONB ENCODING UTF8);
ERROR:  syntax error at or near "ENCODING"
LINE 1: SELECT JSON_OBJECT(RETURNING text FORMAT JSONB ENCODING UTF8...
                                                       ^
SELECT JSON_OBJECT(RETURNING bytea);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF8);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF16);
ERROR:  invalid destination encoding name "UTF16"
SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF32);
ERROR:  invalid destination encoding name "UTF32"
SELECT JSON_OBJECT(RETURNING bytea FORMAT JSONB);
  ?column?  
------------
 \x00000020
(1 row)

SELECT JSON_OBJECT(NULL: 1);
ERROR:  argument 3 cannot be null
HINT:  Object keys should be text.
SELECT JSON_OBJECT('a': 2 + 3);
 ?column?  
-----------
 {"a" : 5}
(1 row)

SELECT JSON_OBJECT('a' VALUE 2 + 3);
 ?column?  
-----------
 {"a" : 5}
(1 row)

--SELECT JSON_OBJECT(KEY 'a' VALUE 2 + 3);
SELECT JSON_OBJECT('a' || 2: 1);
  ?column?  
------------
 {"a2" : 1}
(1 row)

SELECT JSON_OBJECT(('a' || 2) VALUE 1);
  ?column?  
------------
 {"a2" : 1}
(1 row)

--SELECT JSON_OBJECT('a' || 2 VALUE 1);
--SELECT JSON_OBJECT(KEY 'a' || 2 VALUE 1);
SELECT JSON_OBJECT('a': 2::text);
  ?column?   
-------------
 {"a" : "2"}
(1 row)

SELECT JSON_OBJECT('a' VALUE 2::text);
  ?column?   
-------------
 {"a" : "2"}
(1 row)

--SELECT JSON_OBJECT(KEY 'a' VALUE 2::text);
SELECT JSON_OBJECT(1::text: 2);
 ?column?  
-----------
 {"1" : 2}
(1 row)

SELECT JSON_OBJECT((1::text) VALUE 2);
 ?column?  
-----------
 {"1" : 2}
(1 row)

--SELECT JSON_OBJECT(1::text VALUE 2);
--SELECT JSON_OBJECT(KEY 1::text VALUE 2);
SELECT JSON_OBJECT(json '[1]': 123);
ERROR:  key value must be scalar, not array, composite, or json
SELECT JSON_OBJECT(ARRAY[1,2,3]: 'aaa');
ERROR:  key value must be scalar, not array, composite, or json
SELECT JSON_OBJECT(
	'a': '123',
	1.23: 123,
	'c': json '[ 1,true,{ } ]',
	'd': jsonb '{ "x" : 123.45 }'
);
                                ?column?                                
------------------------------------------------------------------------
 {"a" : "123", "1.23" : 123, "c" : [ 1,true,{ } ], "d" : {"x": 123.45}}
(1 row)

SELECT JSON_OBJECT(
	'a': '123',
	1.23: 123,
	'c': json '[ 1,true,{ } ]',
	'd': jsonb '{ "x" : 123.45 }'
	RETURNING jsonb
);
                             ?column?                              
-------------------------------------------------------------------
 {"a": "123", "c": [1, true, {}], "d": {"x": 123.45}, "1.23": 123}
(1 row)

/*
SELECT JSON_OBJECT(
	'a': '123',
	KEY 1.23 VALUE 123,
	'c' VALUE json '[1, true, {}]'
);
*/
SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa'));
                   ?column?                    
-----------------------------------------------
 {"a" : "123", "b" : {"a" : 111, "b" : "aaa"}}
(1 row)

SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa' RETURNING jsonb));
                  ?column?                   
---------------------------------------------
 {"a" : "123", "b" : {"a": 111, "b": "aaa"}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text));
       ?column?        
-----------------------
 {"a" : "{\"b\" : 1}"}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text) FORMAT JSON);
     ?column?      
-------------------
 {"a" : {"b" : 1}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text) FORMAT JSONB);
     ?column?     
------------------
 {"a" : {"b": 1}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea));
            ?column?             
---------------------------------
 {"a" : "\\x7b226222203a20317d"}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea) FORMAT JSON);
     ?column?      
-------------------
 {"a" : {"b" : 1}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea FORMAT JSONB));
                           ?column?                            
---------------------------------------------------------------
 {"a" : "\\x01000020010000800b000010620000002000000000800100"}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea FORMAT JSONB) FORMAT JSONB);
     ?column?     
------------------
 {"a" : {"b": 1}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea FORMAT JSON) FORMAT JSONB);
ERROR:  incorrect jsonb binary data format
SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2);
             ?column?             
----------------------------------
 {"a" : "1", "b" : null, "c" : 2}
(1 row)

SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 NULL ON NULL);
             ?column?             
----------------------------------
 {"a" : "1", "b" : null, "c" : 2}
(1 row)

SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 ABSENT ON NULL);
       ?column?       
----------------------
 {"a" : "1", "c" : 2}
(1 row)

SELECT JSON_OBJECT(1: 1, '1': NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '1': NULL ABSENT ON NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '1': NULL NULL ON NULL WITH UNIQUE RETURNING jsonb);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '1': NULL ABSENT ON NULL WITH UNIQUE RETURNING jsonb);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 NULL ON NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE);
      ?column?      
--------------------
 {"1" : 1, "1" : 1}
(1 row)

SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITH UNIQUE RETURNING jsonb);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE RETURNING jsonb);
 ?column? 
----------
 {"1": 1}
(1 row)

SELECT JSON_OBJECT(1: 1, '2': NULL, '3': 1, 4: NULL, '5': 'a' ABSENT ON NULL WITH UNIQUE RETURNING jsonb);
          ?column?          
----------------------------
 {"1": 1, "3": 1, "5": "a"}
(1 row)

-- JSON_ARRAY()
SELECT JSON_ARRAY();
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING json);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING json FORMAT JSON);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING json FORMAT JSONB);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING jsonb);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING jsonb FORMAT JSON);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING jsonb FORMAT JSONB);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text FORMAT JSON);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING UTF8);
ERROR:  cannot set JSON encoding for non-bytea output types
LINE 1: SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING UTF8);
                                         ^
SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING INVALID_ENCODING);
ERROR:  unrecognized JSON encoding: invalid_encoding
SELECT JSON_ARRAY(RETURNING text FORMAT JSONB);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text FORMAT JSONB ENCODING UTF8);
ERROR:  syntax error at or near "ENCODING"
LINE 1: SELECT JSON_ARRAY(RETURNING text FORMAT JSONB ENCODING UTF8)...
                                                      ^
SELECT JSON_ARRAY(RETURNING bytea);
 ?column? 
----------
 \x5b5d
(1 row)

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON);
 ?column? 
----------
 \x5b5d
(1 row)

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF8);
 ?column? 
----------
 \x5b5d
(1 row)

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF16);
ERROR:  invalid destination encoding name "UTF16"
SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF32);
ERROR:  invalid destination encoding name "UTF32"
SELECT JSON_ARRAY(RETURNING bytea FORMAT JSONB);
  ?column?  
------------
 \x00000040
(1 row)

SELECT JSON_ARRAY('aaa', 111, true, array[1,2,3], NULL, json '{"a": [1]}', jsonb '["a",3]');
                     ?column?                      
---------------------------------------------------
 ["aaa", 111, true, [1,2,3], {"a": [1]}, ["a", 3]]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL);
     ?column?     
------------------
 ["a", null, "b"]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL);
  ?column?  
------------
 ["a", "b"]
(1 row)

SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL);
 ?column? 
----------
 ["b"]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL RETURNING jsonb);
     ?column?     
------------------
 ["a", null, "b"]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL RETURNING jsonb);
  ?column?  
------------
 ["a", "b"]
(1 row)

SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL RETURNING jsonb);
 ?column? 
----------
 ["b"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' RETURNING text));
           ?column?            
-------------------------------
 ["[\"{ \\\"a\\\" : 123 }\"]"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text));
       ?column?        
-----------------------
 ["[{ \"a\" : 123 }]"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text) FORMAT JSON);
     ?column?      
-------------------
 [[{ "a" : 123 }]]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text) FORMAT JSONB);
    ?column?    
----------------
 [[{"a": 123}]]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING bytea FORMAT JSONB));
                                ?column?                                 
-------------------------------------------------------------------------
 ["\\x01000040180000d001000020010000800b000010610000002000000000807b00"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING bytea FORMAT JSONB) FORMAT JSONB);
    ?column?    
----------------
 [[{"a": 123}]]
(1 row)

SELECT JSON_ARRAY(SELECT i FROM (VALUES (1), (2), (NULL), (4)) foo(i));
 ?column?  
-----------
 [1, 2, 4]
(1 row)

SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i));
 ?column? 
----------
 [[1,2], +
  [3,4]]
(1 row)

SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i) RETURNING jsonb);
     ?column?     
------------------
 [[1, 2], [3, 4]]
(1 row)

--SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i) NULL ON NULL);
--SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i) NULL ON NULL RETURNING jsonb);
SELECT JSON_ARRAY(SELECT i FROM (VALUES (3), (1), (NULL), (2)) foo(i) ORDER BY i);
 ?column?  
-----------
 [1, 2, 3]
(1 row)

-- JSON_ARRAYAGG()
SELECT	JSON_ARRAYAGG(i) IS NULL,
		JSON_ARRAYAGG(i RETURNING jsonb) IS NULL
FROM generate_series(1, 0) i;
 ?column? | ?column? 
----------+----------
 t        | t
(1 row)

SELECT	JSON_ARRAYAGG(i),
		JSON_ARRAYAGG(i RETURNING jsonb)
FROM generate_series(1, 5) i;
    ?column?     |    ?column?     
-----------------+-----------------
 [1, 2, 3, 4, 5] | [1, 2, 3, 4, 5]
(1 row)

SELECT JSON_ARRAYAGG(i ORDER BY i DESC)
FROM generate_series(1, 5) i;
    ?column?     
-----------------
 [5, 4, 3, 2, 1]
(1 row)

SELECT JSON_ARRAYAGG(i::text::json)
FROM generate_series(1, 5) i;
    ?column?     
-----------------
 [1, 2, 3, 4, 5]
(1 row)

SELECT JSON_ARRAYAGG(JSON_ARRAY(i, i + 1 RETURNING text) FORMAT JSON)
FROM generate_series(1, 5) i;
                 ?column?                 
------------------------------------------
 [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]
(1 row)

SELECT	JSON_ARRAYAGG(NULL),
		JSON_ARRAYAGG(NULL RETURNING jsonb)
FROM generate_series(1, 5);
 ?column? | ?column? 
----------+----------
 []       | []
(1 row)

SELECT	JSON_ARRAYAGG(NULL NULL ON NULL),
		JSON_ARRAYAGG(NULL NULL ON NULL RETURNING jsonb)
FROM generate_series(1, 5);
            ?column?            |            ?column?            
--------------------------------+--------------------------------
 [null, null, null, null, null] | [null, null, null, null, null]
(1 row)

SELECT
	JSON_ARRAYAGG(bar),
	JSON_ARRAYAGG(bar RETURNING jsonb),
	JSON_ARRAYAGG(bar ABSENT ON NULL),
	JSON_ARRAYAGG(bar ABSENT ON NULL RETURNING jsonb),
	JSON_ARRAYAGG(bar NULL ON NULL),
	JSON_ARRAYAGG(bar NULL ON NULL RETURNING jsonb),
	JSON_ARRAYAGG(foo),
	JSON_ARRAYAGG(foo RETURNING jsonb),
	JSON_ARRAYAGG(foo ORDER BY bar) FILTER (WHERE bar > 2),
	JSON_ARRAYAGG(foo ORDER BY bar RETURNING jsonb) FILTER (WHERE bar > 2)
FROM
	(VALUES (NULL), (3), (1), (NULL), (NULL), (5), (2), (4), (NULL)) foo(bar);
    ?column?     |    ?column?     |    ?column?     |    ?column?     |                ?column?                 |                ?column?                 |    ?column?     |                                                         ?column?                                                         |   ?column?   |               ?column?               
-----------------+-----------------+-----------------+-----------------+-----------------------------------------+-----------------------------------------+-----------------+--------------------------------------------------------------------------------------------------------------------------+--------------+--------------------------------------
 [3, 1, 5, 2, 4] | [3, 1, 5, 2, 4] | [3, 1, 5, 2, 4] | [3, 1, 5, 2, 4] | [null, 3, 1, null, null, 5, 2, 4, null] | [null, 3, 1, null, null, 5, 2, 4, null] | [{"bar":null}, +| [{"bar": null}, {"bar": 3}, {"bar": 1}, {"bar": null}, {"bar": null}, {"bar": 5}, {"bar": 2}, {"bar": 4}, {"bar": null}] | [{"bar":3}, +| [{"bar": 3}, {"bar": 4}, {"bar": 5}]
                 |                 |                 |                 |                                         |                                         |  {"bar":3},    +|                                                                                                                          |  {"bar":4}, +| 
                 |                 |                 |                 |                                         |                                         |  {"bar":1},    +|                                                                                                                          |  {"bar":5}]  | 
                 |                 |                 |                 |                                         |                                         |  {"bar":null}, +|                                                                                                                          |              | 
                 |                 |                 |                 |                                         |                                         |  {"bar":null}, +|                                                                                                                          |              | 
                 |                 |                 |                 |                                         |                                         |  {"bar":5},    +|                                                                                                                          |              | 
                 |                 |                 |                 |                                         |                                         |  {"bar":2},    +|                                                                                                                          |              | 
                 |                 |                 |                 |                                         |                                         |  {"bar":4},    +|                                                                                                                          |              | 
                 |                 |                 |                 |                                         |                                         |  {"bar":null}]  |                                                                                                                          |              | 
(1 row)

-- JSON_OBJECTAGG()
SELECT	JSON_OBJECTAGG('key': 1) IS NULL,
		JSON_OBJECTAGG('key': 1 RETURNING jsonb) IS NULL
WHERE FALSE;
 ?column? | ?column? 
----------+----------
 t        | t
(1 row)

SELECT JSON_OBJECTAGG(NULL: 1);
ERROR:  field name must not be null
SELECT JSON_OBJECTAGG(NULL: 1 RETURNING jsonb);
ERROR:  field name must not be null
SELECT
	JSON_OBJECTAGG(i: i),
--	JSON_OBJECTAGG(i VALUE i),
--	JSON_OBJECTAGG(KEY i VALUE i),
	JSON_OBJECTAGG(i: i RETURNING jsonb)
FROM
	generate_series(1, 5) i;
                    ?column?                     |                 ?column?                 
-------------------------------------------------+------------------------------------------
 { "1" : 1, "2" : 2, "3" : 3, "4" : 4, "5" : 5 } | {"1": 1, "2": 2, "3": 3, "4": 4, "5": 5}
(1 row)

SELECT
	JSON_OBJECTAGG(k: v),
	JSON_OBJECTAGG(k: v NULL ON NULL),
	JSON_OBJECTAGG(k: v ABSENT ON NULL),
	JSON_OBJECTAGG(k: v RETURNING jsonb),
	JSON_OBJECTAGG(k: v NULL ON NULL RETURNING jsonb),
	JSON_OBJECTAGG(k: v ABSENT ON NULL RETURNING jsonb)
FROM
	(VALUES (1, 1), (1, NULL), (2, NULL), (3, 3)) foo(k, v);
                   ?column?                   |                   ?column?                   |       ?column?       |            ?column?            |            ?column?            |     ?column?     
----------------------------------------------+----------------------------------------------+----------------------+--------------------------------+--------------------------------+------------------
 { "1" : 1, "1" : null, "2" : null, "3" : 3 } | { "1" : 1, "1" : null, "2" : null, "3" : 3 } | { "1" : 1, "3" : 3 } | {"1": null, "2": null, "3": 3} | {"1": null, "2": null, "3": 3} | {"1": 1, "3": 3}
(1 row)

SELECT JSON_OBJECTAGG(k: v WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (0, NULL), (3, NULL), (2, 2), (4, NULL)) foo(k, v);
       ?column?       
----------------------
 { "1" : 1, "2" : 2 }
(1 row)

SELECT JSON_OBJECTAGG(k: v WITH UNIQUE KEYS RETURNING jsonb)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS RETURNING jsonb)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v);
ERROR:  duplicate JSON key "1"
-- IS JSON predicate
SELECT NULL IS JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL IS NOT JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL::json IS JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL::jsonb IS JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL::text IS JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL::bytea IS JSON;
 ?column? 
----------
 
(1 row)

SELECT NULL::int IS JSON;
ERROR:  cannot use type integer in IS JSON predicate
SELECT '' FORMAT JSONB IS JSON;
ERROR:  cannot use FORMAT JSONB for string input types
LINE 1: SELECT '' FORMAT JSONB IS JSON;
                  ^
SELECT bytea '\x00' IS JSON;
ERROR:  invalid byte sequence for encoding "UTF8": 0x00
SELECT bytea '\x00' FORMAT JSON IS JSON;
ERROR:  invalid byte sequence for encoding "UTF8": 0x00
SELECT bytea '\x00' FORMAT JSONB IS JSON;
 ?column? 
----------
 f
(1 row)

CREATE TABLE test_is_json (js text);
INSERT INTO test_is_json VALUES
 (NULL),
 (''),
 ('123'),
 ('"aaa "'),
 ('true'),
 ('null'),
 ('[]'),
 ('[1, "2", {}]'),
 ('{}'),
 ('{ "a": 1, "b": null }'),
 ('{ "a": 1, "a": null }'),
 ('{ "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }'),
 ('{ "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] }'),
 ('aaa'),
 ('{a:1}'),
 ('["a",]');
SELECT
	js,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE",
	js FORMAT JSON IS JSON "FORMAT JSON IS JSON"
FROM
	test_is_json;
                      js                       | IS JSON | IS NOT JSON | IS VALUE | IS OBJECT | IS ARRAY | IS SCALAR | WITHOUT UNIQUE | WITH UNIQUE | FORMAT JSON IS JSON 
-----------------------------------------------+---------+-------------+----------+-----------+----------+-----------+----------------+-------------+---------------------
                                               |         |             |          |           |          |           |                |             | 
                                               | f       | t           | f        | f         | f        | f         | f              | f           | f
 123                                           | t       | f           | t        | f         | f        | t         | t              | t           | t
 "aaa "                                        | t       | f           | t        | f         | f        | t         | t              | t           | t
 true                                          | t       | f           | t        | f         | f        | t         | t              | t           | t
 null                                          | t       | f           | t        | f         | f        | t         | t              | t           | t
 []                                            | t       | f           | t        | f         | t        | f         | t              | t           | t
 [1, "2", {}]                                  | t       | f           | t        | f         | t        | f         | t              | t           | t
 {}                                            | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "b": null }                         | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "a": null }                         | t       | f           | t        | t         | f        | f         | t              | f           | t
 { "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }     | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] } | t       | f           | t        | t         | f        | f         | t              | f           | t
 aaa                                           | f       | t           | f        | f         | f        | f         | f              | f           | f
 {a:1}                                         | f       | t           | f        | f         | f        | f         | f              | f           | f
 ["a",]                                        | f       | t           | f        | f         | f        | f         | f              | f           | f
(16 rows)

SELECT
	js,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE",
	js FORMAT JSON IS JSON "FORMAT JSON IS JSON"
FROM
	(SELECT js::json FROM test_is_json WHERE js IS JSON) foo(js);
                      js                       | IS JSON | IS NOT JSON | IS VALUE | IS OBJECT | IS ARRAY | IS SCALAR | WITHOUT UNIQUE | WITH UNIQUE | FORMAT JSON IS JSON 
-----------------------------------------------+---------+-------------+----------+-----------+----------+-----------+----------------+-------------+---------------------
 123                                           | t       | f           | t        | f         | f        | t         | t              | t           | t
 "aaa "                                        | t       | f           | t        | f         | f        | t         | t              | t           | t
 true                                          | t       | f           | t        | f         | f        | t         | t              | t           | t
 null                                          | t       | f           | t        | f         | f        | t         | t              | t           | t
 []                                            | t       | f           | t        | f         | t        | f         | t              | t           | t
 [1, "2", {}]                                  | t       | f           | t        | f         | t        | f         | t              | t           | t
 {}                                            | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "b": null }                         | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "a": null }                         | t       | f           | t        | t         | f        | f         | t              | f           | t
 { "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }     | t       | f           | t        | t         | f        | f         | t              | t           | t
 { "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] } | t       | f           | t        | t         | f        | f         | t              | f           | t
(11 rows)

SELECT
	js0,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE",
	js FORMAT JSON IS JSON "FORMAT JSON IS JSON",
	js FORMAT JSONB IS JSON "FORMAT JSONB IS JSON"
FROM
	(SELECT js, js::bytea FROM test_is_json WHERE js IS JSON) foo(js0, js);
                      js0                      | IS JSON | IS NOT JSON | IS VALUE | IS OBJECT | IS ARRAY | IS SCALAR | WITHOUT UNIQUE | WITH UNIQUE | FORMAT JSON IS JSON | FORMAT JSONB IS JSON 
-----------------------------------------------+---------+-------------+----------+-----------+----------+-----------+----------------+-------------+---------------------+----------------------
 123                                           | t       | f           | t        | f         | f        | t         | t              | t           | t                   | f
 "aaa "                                        | t       | f           | t        | f         | f        | t         | t              | t           | t                   | f
 true                                          | t       | f           | t        | f         | f        | t         | t              | t           | t                   | f
 null                                          | t       | f           | t        | f         | f        | t         | t              | t           | t                   | f
 []                                            | t       | f           | t        | f         | t        | f         | t              | t           | t                   | f
 [1, "2", {}]                                  | t       | f           | t        | f         | t        | f         | t              | t           | t                   | f
 {}                                            | t       | f           | t        | t         | f        | f         | t              | t           | t                   | f
 { "a": 1, "b": null }                         | t       | f           | t        | t         | f        | f         | t              | t           | t                   | f
 { "a": 1, "a": null }                         | t       | f           | t        | t         | f        | f         | t              | f           | t                   | f
 { "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }     | t       | f           | t        | t         | f        | f         | t              | t           | t                   | f
 { "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] } | t       | f           | t        | t         | f        | f         | t              | f           | t                   | f
(11 rows)

SELECT
	js,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE",
	js FORMAT JSON IS JSON "FORMAT JSON IS JSON"
FROM
	(SELECT js::jsonb FROM test_is_json WHERE js IS JSON) foo(js);
                 js                  | IS JSON | IS NOT JSON | IS VALUE | IS OBJECT | IS ARRAY | IS SCALAR | WITHOUT UNIQUE | WITH UNIQUE | FORMAT JSON IS JSON 
-------------------------------------+---------+-------------+----------+-----------+----------+-----------+----------------+-------------+---------------------
 123                                 | t       | f           | t        | f         | f        | t         | t              | t           | t
 "aaa "                              | t       | f           | t        | f         | f        | t         | t              | t           | t
 true                                | t       | f           | t        | f         | f        | t         | t              | t           | t
 null                                | t       | f           | t        | f         | f        | t         | t              | t           | t
 []                                  | t       | f           | t        | f         | t        | f         | t              | t           | t
 [1, "2", {}]                        | t       | f           | t        | f         | t        | f         | t              | t           | t
 {}                                  | t       | f           | t        | t         | f        | f         | t              | t           | t
 {"a": 1, "b": null}                 | t       | f           | t        | t         | f        | f         | t              | t           | t
 {"a": null}                         | t       | f           | t        | t         | f        | f         | t              | t           | t
 {"a": 1, "b": [{"a": 1}, {"a": 2}]} | t       | f           | t        | t         | f        | f         | t              | t           | t
 {"a": 1, "b": [{"a": 2, "b": 0}]}   | t       | f           | t        | t         | f        | f         | t              | t           | t
(11 rows)

SELECT
	js0,
	js FORMAT JSONB IS JSON "IS JSON",
	js FORMAT JSONB IS NOT JSON "IS NOT JSON",
	js FORMAT JSONB IS JSON VALUE "IS VALUE",
	js FORMAT JSONB IS JSON OBJECT "IS OBJECT",
	js FORMAT JSONB IS JSON ARRAY "IS ARRAY",
	js FORMAT JSONB IS JSON SCALAR "IS SCALAR",
	js FORMAT JSONB IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js FORMAT JSONB IS JSON WITH UNIQUE KEYS "WITH UNIQUE"
FROM
	(SELECT js, js::jsonb::bytea FROM test_is_json WHERE js IS JSON) foo(js0, js);
                      js0                      | IS JSON | IS NOT JSON | IS VALUE | IS OBJECT | IS ARRAY | IS SCALAR | WITHOUT UNIQUE | WITH UNIQUE 
-----------------------------------------------+---------+-------------+----------+-----------+----------+-----------+----------------+-------------
 123                                           | t       | f           | t        | f         | f        | t         | t              | t
 "aaa "                                        | t       | f           | t        | f         | f        | t         | t              | t
 true                                          | t       | f           | t        | f         | f        | t         | t              | t
 null                                          | t       | f           | t        | f         | f        | t         | t              | t
 []                                            | t       | f           | t        | f         | t        | f         | t              | t
 [1, "2", {}]                                  | t       | f           | t        | f         | t        | f         | t              | t
 {}                                            | t       | f           | t        | t         | f        | f         | t              | t
 { "a": 1, "b": null }                         | t       | f           | t        | t         | f        | f         | t              | t
 { "a": 1, "a": null }                         | t       | f           | t        | t         | f        | f         | t              | t
 { "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }     | t       | f           | t        | t         | f        | f         | t              | t
 { "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] } | t       | f           | t        | t         | f        | f         | t              | t
(11 rows)

-- JSON_EXISTS
SELECT JSON_EXISTS(NULL, '$');
ERROR:  JSON_EXISTS() is not yet implemented for json type
LINE 1: SELECT JSON_EXISTS(NULL, '$');
               ^
SELECT JSON_EXISTS(NULL::text, '$');
ERROR:  JSON_EXISTS() is not yet implemented for json type
LINE 1: SELECT JSON_EXISTS(NULL::text, '$');
               ^
SELECT JSON_EXISTS(NULL::bytea, '$');
ERROR:  JSON_EXISTS() is not yet implemented for json type
LINE 1: SELECT JSON_EXISTS(NULL::bytea, '$');
               ^
SELECT JSON_EXISTS(NULL::json, '$');
ERROR:  JSON_EXISTS() is not yet implemented for json type
LINE 1: SELECT JSON_EXISTS(NULL::json, '$');
               ^
SELECT JSON_EXISTS(NULL::jsonb, '$');
 ?column? 
----------
 
(1 row)

SELECT JSON_EXISTS(NULL FORMAT JSON, '$');
ERROR:  JSON_EXISTS() is not yet implemented for json type
LINE 1: SELECT JSON_EXISTS(NULL FORMAT JSON, '$');
               ^
SELECT JSON_EXISTS(NULL FORMAT JSONB, '$');
 ?column? 
----------
 
(1 row)

SELECT JSON_EXISTS('' FORMAT JSONB, '$');
 ?column? 
----------
 f
(1 row)

SELECT JSON_EXISTS('' FORMAT JSONB, '$' TRUE ON ERROR);
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS('' FORMAT JSONB, '$' FALSE ON ERROR);
 ?column? 
----------
 f
(1 row)

SELECT JSON_EXISTS('' FORMAT JSONB, '$' UNKNOWN ON ERROR);
 ?column? 
----------
 
(1 row)

SELECT JSON_EXISTS('' FORMAT JSONB, '$' ERROR ON ERROR);
ERROR:  invalid input syntax for type json
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
SELECT JSON_EXISTS(bytea '' FORMAT JSONB, '$' ERROR ON ERROR);
ERROR:  incorrect jsonb binary data format
SELECT JSON_EXISTS(jsonb '[]', '$');
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS('[]' FORMAT JSONB, '$');
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS(JSON_OBJECT(RETURNING bytea FORMAT JSONB) FORMAT JSONB, '$');
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS(jsonb '1', '$');
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS(jsonb 'null', '$');
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS(jsonb '[]', '$');
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS(jsonb '1', '$.a');
 ?column? 
----------
 f
(1 row)

SELECT JSON_EXISTS(jsonb 'null', '$.a');
 ?column? 
----------
 f
(1 row)

SELECT JSON_EXISTS(jsonb '[]', '$.a');
 ?column? 
----------
 f
(1 row)

SELECT JSON_EXISTS(jsonb '[1, "aaa", {"a": 1}]', '$.a');
 ?column? 
----------
 f
(1 row)

SELECT JSON_EXISTS(jsonb '{}', '$.a');
 ?column? 
----------
 f
(1 row)

SELECT JSON_EXISTS(jsonb '{"b": 1, "a": 2}', '$.a');
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS(jsonb '1', '$.a.b');
 ?column? 
----------
 f
(1 row)

SELECT JSON_EXISTS(jsonb '{"a": {"b": 1}}', '$.a.b');
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS(jsonb '{"a": 1, "b": 2}', '$.a.b');
 ?column? 
----------
 f
(1 row)

SELECT JSON_EXISTS(jsonb '{"a": 1, "b": 2}', '$.* ? (@ > $x)' PASSING 1 AS x);
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS(jsonb '{"a": 1, "b": 2}', '$.* ? (@ > $x)' PASSING '1' AS x);
 ?column? 
----------
 f
(1 row)

SELECT JSON_EXISTS(jsonb '{"a": 1, "b": 2}', '$.* ? (@ > $x && @ < $y)' PASSING 0 AS x, 2 AS y);
 ?column? 
----------
 t
(1 row)

SELECT JSON_EXISTS(jsonb '{"a": 1, "b": 2}', '$.* ? (@ > $x && @ < $y)' PASSING 0 AS x, 1 AS y);
 ?column? 
----------
 f
(1 row)

-- JSON_VALUE
SELECT JSON_VALUE(NULL, '$');
ERROR:  JSON_VALUE() is not yet implemented for json type
LINE 1: SELECT JSON_VALUE(NULL, '$');
               ^
SELECT JSON_VALUE(NULL::text, '$');
ERROR:  JSON_VALUE() is not yet implemented for json type
LINE 1: SELECT JSON_VALUE(NULL::text, '$');
               ^
SELECT JSON_VALUE(NULL::bytea, '$');
ERROR:  JSON_VALUE() is not yet implemented for json type
LINE 1: SELECT JSON_VALUE(NULL::bytea, '$');
               ^
SELECT JSON_VALUE(NULL::json, '$');
ERROR:  JSON_VALUE() is not yet implemented for json type
LINE 1: SELECT JSON_VALUE(NULL::json, '$');
               ^
SELECT JSON_VALUE(NULL::jsonb, '$');
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(NULL FORMAT JSON, '$');
ERROR:  JSON_VALUE() is not yet implemented for json type
LINE 1: SELECT JSON_VALUE(NULL FORMAT JSON, '$');
               ^
SELECT JSON_VALUE(NULL FORMAT JSONB, '$');
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE('' FORMAT JSONB, '$');
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE('' FORMAT JSONB, '$' NULL ON ERROR);
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE('' FORMAT JSONB, '$' DEFAULT '"default value"' ON ERROR);
    ?column?     
-----------------
 "default value"
(1 row)

SELECT JSON_VALUE('' FORMAT JSONB, '$' ERROR ON ERROR);
ERROR:  invalid input syntax for type json
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
SELECT JSON_VALUE(jsonb 'null', '$');
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(jsonb 'null', '$' RETURNING int);
 ?column? 
----------
         
(1 row)

SELECT JSON_VALUE(jsonb 'true', '$');
 ?column? 
----------
 true
(1 row)

SELECT JSON_VALUE(jsonb 'true', '$' RETURNING bool);
 ?column? 
----------
 t
(1 row)

SELECT JSON_VALUE(jsonb '123', '$');
 ?column? 
----------
 123
(1 row)

SELECT JSON_VALUE(jsonb '123', '$' RETURNING int) + 234;
 ?column? 
----------
      357
(1 row)

SELECT JSON_VALUE(jsonb '123', '$' RETURNING text);
 ?column? 
----------
 123
(1 row)

/* jsonb bytea ??? */
SELECT JSON_VALUE(jsonb '123', '$' RETURNING bytea);
 ?column? 
----------
 \x313233
(1 row)

SELECT JSON_VALUE(jsonb '1.23', '$');
 ?column? 
----------
 1.23
(1 row)

SELECT JSON_VALUE(jsonb '"1.23"', '$' RETURNING numeric);
 ?column? 
----------
     1.23
(1 row)

SELECT JSON_VALUE(jsonb '"aaa"', '$');
 ?column? 
----------
 "aaa"
(1 row)

SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING text);
 ?column? 
----------
 aaa
(1 row)

SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING char(5));
 ?column? 
----------
 aaa  
(1 row)

SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING char(2));
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING json);
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING jsonb);
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING json ERROR ON ERROR);
ERROR:  invalid input syntax for type json
DETAIL:  Token "aaa" is invalid.
CONTEXT:  JSON data, line 1: aaa
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING jsonb ERROR ON ERROR);
ERROR:  invalid input syntax for type json
DETAIL:  Token "aaa" is invalid.
CONTEXT:  JSON data, line 1: aaa
SELECT JSON_VALUE(jsonb '"\"aaa\""', '$' RETURNING json);
 ?column? 
----------
 "aaa"
(1 row)

SELECT JSON_VALUE(jsonb '"\"aaa\""', '$' RETURNING jsonb);
 ?column? 
----------
 "aaa"
(1 row)

SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING int);
 ?column? 
----------
         
(1 row)

SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING int ERROR ON ERROR);
ERROR:  invalid input syntax for integer: "aaa"
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING int DEFAULT 111 ON ERROR);
 ?column? 
----------
      111
(1 row)

SELECT JSON_VALUE(jsonb '"123"', '$' RETURNING int) + 234;
 ?column? 
----------
      357
(1 row)

SELECT JSON_VALUE(jsonb '"2017-02-20"', '$' RETURNING date) + 9;
  ?column?  
------------
 03-01-2017
(1 row)

-- Test NULL checks execution in domain types
CREATE DOMAIN int_not_null AS int NOT NULL;
SELECT JSON_VALUE(jsonb '1', '$.a' RETURNING int_not_null);
ERROR:  domain int_not_null does not allow null values
SELECT JSON_VALUE(jsonb '1', '$.a' RETURNING int_not_null NULL ON ERROR);
ERROR:  domain int_not_null does not allow null values
SELECT JSON_VALUE(jsonb '1', '$.a' RETURNING int_not_null DEFAULT NULL ON ERROR);
ERROR:  domain int_not_null does not allow null values
DROP DOMAIN int_not_null;
SELECT JSON_VALUE(jsonb '[]', '$');
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(jsonb '[]', '$' ERROR ON ERROR);
ERROR:  SQL/JSON scalar required
SELECT JSON_VALUE(jsonb '{}', '$');
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(jsonb '{}', '$' ERROR ON ERROR);
ERROR:  SQL/JSON scalar required
SELECT JSON_VALUE(jsonb '1', '$.a');
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(jsonb '1', '$.a' ERROR ON ERROR);
ERROR:  SQL/JSON member not found
SELECT JSON_VALUE(jsonb '1', 'lax $.a' ERROR ON ERROR);
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(jsonb '1', 'lax $.a' ERROR ON EMPTY ERROR ON ERROR);
ERROR:  no SQL/JSON item
SELECT JSON_VALUE(jsonb '1', '$.a' DEFAULT 2 ON ERROR);
ERROR:  cannot cast DEFAULT expression type integer to jsonb
LINE 1: SELECT JSON_VALUE(jsonb '1', '$.a' DEFAULT 2 ON ERROR);
                                                   ^
SELECT JSON_VALUE(jsonb '1', 'lax $.a' DEFAULT 2 ON ERROR);
ERROR:  cannot cast DEFAULT expression type integer to jsonb
LINE 1: SELECT JSON_VALUE(jsonb '1', 'lax $.a' DEFAULT 2 ON ERROR);
                                                       ^
SELECT JSON_VALUE(jsonb '1', 'lax $.a' DEFAULT '2' ON ERROR);
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(jsonb '1', 'lax $.a' NULL ON EMPTY DEFAULT '2' ON ERROR);
 ?column? 
----------
 
(1 row)

SELECT JSON_VALUE(jsonb '1', 'lax $.a' DEFAULT '2' ON EMPTY DEFAULT '3' ON ERROR);
 ?column? 
----------
 2
(1 row)

SELECT JSON_VALUE(jsonb '1', 'lax $.a' ERROR ON EMPTY DEFAULT '3' ON ERROR);
 ?column? 
----------
 3
(1 row)

SELECT JSON_VALUE(jsonb '[1,2]', '$[*]' ERROR ON ERROR);
ERROR:  more than one SQL/JSON item
SELECT JSON_VALUE(jsonb '[1,2]', '$[*]' DEFAULT '0' ON ERROR);
 ?column? 
----------
 0
(1 row)

SELECT JSON_VALUE(jsonb '[" "]', '$[*]' RETURNING int ERROR ON ERROR);
ERROR:  invalid input syntax for integer: " "
SELECT JSON_VALUE(jsonb '[" "]', '$[*]' RETURNING int DEFAULT 2 + 3 ON ERROR);
 ?column? 
----------
        5
(1 row)

SELECT JSON_VALUE(jsonb '["1"]', '$[*]' RETURNING int DEFAULT 2 + 3 ON ERROR);
 ?column? 
----------
        1
(1 row)

SELECT
	x,
	JSON_VALUE(
		jsonb '{"a": 1, "b": 2}',
		'$.* ? (@ > $x)' PASSING x AS x
		RETURNING int
		DEFAULT -1 ON EMPTY
		DEFAULT -2 ON ERROR
	) y
FROM
	generate_series(0, 2) x;
 x | y  
---+----
 0 | -2
 1 |  2
 2 | -1
(3 rows)

-- JSON_QUERY
SELECT
	JSON_QUERY(js FORMAT JSONB, '$'),
	JSON_QUERY(js FORMAT JSONB, '$' WITHOUT WRAPPER),
	JSON_QUERY(js FORMAT JSONB, '$' WITH CONDITIONAL WRAPPER),
	JSON_QUERY(js FORMAT JSONB, '$' WITH UNCONDITIONAL ARRAY WRAPPER),
	JSON_QUERY(js FORMAT JSONB, '$' WITH ARRAY WRAPPER)
FROM
	(VALUES
		('null'),
		('12.3'),
		('true'),
		('"aaa"'),
		('[1, null, "2"]'),
		('{"a": 1, "b": [2]}')
	) foo(js);
      ?column?      |      ?column?      |      ?column?      |       ?column?       |       ?column?       
--------------------+--------------------+--------------------+----------------------+----------------------
 null               | null               | [null]             | [null]               | [null]
 12.3               | 12.3               | [12.3]             | [12.3]               | [12.3]
 true               | true               | [true]             | [true]               | [true]
 "aaa"              | "aaa"              | ["aaa"]            | ["aaa"]              | ["aaa"]
 [1, null, "2"]     | [1, null, "2"]     | [1, null, "2"]     | [[1, null, "2"]]     | [[1, null, "2"]]
 {"a": 1, "b": [2]} | {"a": 1, "b": [2]} | {"a": 1, "b": [2]} | [{"a": 1, "b": [2]}] | [{"a": 1, "b": [2]}]
(6 rows)

SELECT
	JSON_QUERY(js FORMAT JSONB, '$[*]') AS "unspec",
	JSON_QUERY(js FORMAT JSONB, '$[*]' WITHOUT WRAPPER) AS "without",
	JSON_QUERY(js FORMAT JSONB, '$[*]' WITH CONDITIONAL WRAPPER) AS "with cond",
	JSON_QUERY(js FORMAT JSONB, '$[*]' WITH UNCONDITIONAL ARRAY WRAPPER) AS "with uncond",
	JSON_QUERY(js FORMAT JSONB, '$[*]' WITH ARRAY WRAPPER) AS "with"
FROM
	(VALUES
		('1'),
		('[]'),
		('[null]'),
		('[12.3]'),
		('[true]'),
		('["aaa"]'),
		('[[1, 2, 3]]'),
		('[{"a": 1, "b": [2]}]'),
		('[1, "2", null, [3]]')
	) foo(js);
       unspec       |      without       |      with cond      |     with uncond      |         with         
--------------------+--------------------+---------------------+----------------------+----------------------
                    |                    |                     |                      | 
                    |                    |                     |                      | 
 null               | null               | [null]              | [null]               | [null]
 12.3               | 12.3               | [12.3]              | [12.3]               | [12.3]
 true               | true               | [true]              | [true]               | [true]
 "aaa"              | "aaa"              | ["aaa"]             | ["aaa"]              | ["aaa"]
 [1, 2, 3]          | [1, 2, 3]          | [1, 2, 3]           | [[1, 2, 3]]          | [[1, 2, 3]]
 {"a": 1, "b": [2]} | {"a": 1, "b": [2]} | {"a": 1, "b": [2]}  | [{"a": 1, "b": [2]}] | [{"a": 1, "b": [2]}]
                    |                    | [1, "2", null, [3]] | [1, "2", null, [3]]  | [1, "2", null, [3]]
(9 rows)

SELECT JSON_QUERY('"aaa"' FORMAT JSONB, '$' RETURNING text);
 ?column? 
----------
 "aaa"
(1 row)

SELECT JSON_QUERY('"aaa"' FORMAT JSONB, '$' RETURNING text KEEP QUOTES);
 ?column? 
----------
 "aaa"
(1 row)

SELECT JSON_QUERY('"aaa"' FORMAT JSONB, '$' RETURNING text KEEP QUOTES ON SCALAR STRING);
 ?column? 
----------
 "aaa"
(1 row)

SELECT JSON_QUERY('"aaa"' FORMAT JSONB, '$' RETURNING text OMIT QUOTES);
 ?column? 
----------
 aaa
(1 row)

SELECT JSON_QUERY('"aaa"' FORMAT JSONB, '$' RETURNING text OMIT QUOTES ON SCALAR STRING);
 ?column? 
----------
 aaa
(1 row)

SELECT JSON_QUERY('"aaa"' FORMAT JSONB, '$' OMIT QUOTES ERROR ON ERROR);
ERROR:  invalid input syntax for type json
DETAIL:  Token "aaa" is invalid.
CONTEXT:  JSON data, line 1: aaa
SELECT JSON_QUERY('"aaa"' FORMAT JSONB, '$' RETURNING json OMIT QUOTES ERROR ON ERROR);
ERROR:  invalid input syntax for type json
DETAIL:  Token "aaa" is invalid.
CONTEXT:  JSON data, line 1: aaa
SELECT JSON_QUERY('"aaa"' FORMAT JSONB, '$' RETURNING bytea FORMAT JSON OMIT QUOTES ERROR ON ERROR);
 ?column? 
----------
 \x616161
(1 row)

SELECT JSON_QUERY('"aaa"' FORMAT JSONB, '$' RETURNING bytea FORMAT JSONB OMIT QUOTES ERROR ON ERROR);
 ?column? 
----------
 \x616161
(1 row)

-- QUOTES behavior should not be specified when WITH WRAPPER used:
-- Should fail
SELECT JSON_QUERY(jsonb '[1]', '$' WITH WRAPPER OMIT QUOTES);
ERROR:  SQL/JSON QUOTES behavior shall not be specified when WITH WRAPPER is used
LINE 1: SELECT JSON_QUERY(jsonb '[1]', '$' WITH WRAPPER OMIT QUOTES)...
                                                        ^
SELECT JSON_QUERY(jsonb '[1]', '$' WITH WRAPPER KEEP QUOTES);
ERROR:  SQL/JSON QUOTES behavior shall not be specified when WITH WRAPPER is used
LINE 1: SELECT JSON_QUERY(jsonb '[1]', '$' WITH WRAPPER KEEP QUOTES)...
                                                        ^
SELECT JSON_QUERY(jsonb '[1]', '$' WITH CONDITIONAL WRAPPER KEEP QUOTES);
ERROR:  SQL/JSON QUOTES behavior shall not be specified when WITH WRAPPER is used
LINE 1: ...N_QUERY(jsonb '[1]', '$' WITH CONDITIONAL WRAPPER KEEP QUOTE...
                                                             ^
SELECT JSON_QUERY(jsonb '[1]', '$' WITH CONDITIONAL WRAPPER OMIT QUOTES);
ERROR:  SQL/JSON QUOTES behavior shall not be specified when WITH WRAPPER is used
LINE 1: ...N_QUERY(jsonb '[1]', '$' WITH CONDITIONAL WRAPPER OMIT QUOTE...
                                                             ^
-- Should succeed
SELECT JSON_QUERY(jsonb '[1]', '$' WITHOUT WRAPPER OMIT QUOTES);
 ?column? 
----------
 [1]
(1 row)

SELECT JSON_QUERY(jsonb '[1]', '$' WITHOUT WRAPPER KEEP QUOTES);
 ?column? 
----------
 [1]
(1 row)

SELECT JSON_QUERY('[]' FORMAT JSONB, '$[*]');
 ?column? 
----------
 
(1 row)

SELECT JSON_QUERY('[]' FORMAT JSONB, '$[*]' NULL ON EMPTY);
 ?column? 
----------
 
(1 row)

SELECT JSON_QUERY('[]' FORMAT JSONB, '$[*]' EMPTY ARRAY ON EMPTY);
 ?column? 
----------
 []
(1 row)

SELECT JSON_QUERY('[]' FORMAT JSONB, '$[*]' EMPTY OBJECT ON EMPTY);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_QUERY('[]' FORMAT JSONB, '$[*]' ERROR ON EMPTY);
 ?column? 
----------
 
(1 row)

SELECT JSON_QUERY('[]' FORMAT JSONB, '$[*]' ERROR ON EMPTY NULL ON ERROR);
 ?column? 
----------
 
(1 row)

SELECT JSON_QUERY('[]' FORMAT JSONB, '$[*]' ERROR ON EMPTY EMPTY ARRAY ON ERROR);
 ?column? 
----------
 []
(1 row)

SELECT JSON_QUERY('[]' FORMAT JSONB, '$[*]' ERROR ON EMPTY EMPTY OBJECT ON ERROR);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_QUERY('[]' FORMAT JSONB, '$[*]' ERROR ON EMPTY ERROR ON ERROR);
ERROR:  no SQL/JSON item
SELECT JSON_QUERY('[]' FORMAT JSONB, '$[*]' ERROR ON ERROR);
 ?column? 
----------
 
(1 row)

SELECT JSON_QUERY('[1,2]' FORMAT JSONB, '$[*]' ERROR ON ERROR);
ERROR:  more than one SQL/JSON item
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING json);
 ?column? 
----------
 [1, 2]
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING json FORMAT JSON);
 ?column? 
----------
 [1, 2]
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING jsonb);
 ?column? 
----------
 [1, 2]
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING jsonb FORMAT JSON);
 ?column? 
----------
 [1, 2]
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING text);
 ?column? 
----------
 [1, 2]
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING char(10));
  ?column?  
------------
 [1, 2]    
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING char(3));
 ?column? 
----------
 
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING text FORMAT JSON);
 ?column? 
----------
 [1, 2]
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING text FORMAT JSONB);
 ?column? 
----------
 [1, 2]
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING bytea);
    ?column?    
----------------
 \x5b312c20325d
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING bytea FORMAT JSON);
    ?column?    
----------------
 \x5b312c20325d
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING bytea FORMAT JSONB);
                          ?column?                          
------------------------------------------------------------
 \x02000040080000900800001020000000008001002000000000800200
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' RETURNING bytea EMPTY OBJECT ON ERROR);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' RETURNING bytea FORMAT JSON EMPTY OBJECT ON ERROR);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' RETURNING bytea FORMAT JSONB EMPTY OBJECT ON ERROR);
  ?column?  
------------
 \x00000020
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' RETURNING json EMPTY OBJECT ON ERROR);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' RETURNING jsonb EMPTY OBJECT ON ERROR);
 ?column? 
----------
 {}
(1 row)

SELECT
	x, y,
	JSON_QUERY(
		jsonb '[1,2,3,4,5,null]',
		'$[*] ? (@ >= $x && @ <= $y)'
		PASSING x AS x, y AS y
		WITH CONDITIONAL WRAPPER
		EMPTY ARRAY ON EMPTY
	) list
FROM
	generate_series(0, 4) x,
	generate_series(0, 4) y;
 x | y |     list     
---+---+--------------
 0 | 0 | []
 0 | 1 | [1]
 0 | 2 | [1, 2]
 0 | 3 | [1, 2, 3]
 0 | 4 | [1, 2, 3, 4]
 1 | 0 | []
 1 | 1 | [1]
 1 | 2 | [1, 2]
 1 | 3 | [1, 2, 3]
 1 | 4 | [1, 2, 3, 4]
 2 | 0 | []
 2 | 1 | []
 2 | 2 | [2]
 2 | 3 | [2, 3]
 2 | 4 | [2, 3, 4]
 3 | 0 | []
 3 | 1 | []
 3 | 2 | []
 3 | 3 | [3]
 3 | 4 | [3, 4]
 4 | 0 | []
 4 | 1 | []
 4 | 2 | []
 4 | 3 | []
 4 | 4 | [4]
(25 rows)

-- Test constraints
CREATE TABLE test_json_constraints (
	js text,
	i int,
	x jsonb DEFAULT JSON_QUERY(jsonb '[1,2]', '$[*]' WITH WRAPPER)
	CONSTRAINT test_json_constraint1
		CHECK (js IS JSON)
	CONSTRAINT test_json_constraint2
		CHECK (JSON_EXISTS(js FORMAT JSONB, '$.a' PASSING i + 5 AS int, i::text AS txt, array[1,2,3] as arr))
	CONSTRAINT test_json_constraint3
		CHECK (JSON_VALUE(js::jsonb, '$.a' RETURNING int DEFAULT ('12' || i)::int ON EMPTY ERROR ON ERROR) > i)
	CONSTRAINT test_json_constraint4
		CHECK (JSON_QUERY(js FORMAT JSONB, '$.a' WITH CONDITIONAL WRAPPER EMPTY OBJECT ON ERROR) < jsonb '[10]')
);
\d test_json_constraints
                                                         Table "public.test_json_constraints"
 Column |  Type   | Collation | Nullable |                                                   Default                                                   
--------+---------+-----------+----------+-------------------------------------------------------------------------------------------------------------
 js     | text    |           |          | 
 i      | integer |           |          | 
 x      | jsonb   |           |          | JSON_QUERY('[1, 2]'::jsonb, '$.[*]' RETURNING jsonb WITH UNCONDITIONAL WRAPPER NULL ON EMPTY NULL ON ERROR)
Check constraints:
    "test_json_constraint1" CHECK (pg_catalog.json_is_valid(js, 'any'::text, false))
    "test_json_constraint2" CHECK (JSON_EXISTS(js FORMAT JSONB, '$."a"' PASSING i + 5 AS int, i::text AS txt, to_jsonb(ARRAY[1, 2, 3]) AS arr FALSE ON ERROR))
    "test_json_constraint3" CHECK ((JSON_VALUE(js::jsonb, '$."a"' RETURNING integer DEFAULT ('12'::text || i)::integer ON EMPTY ERROR ON ERROR)) > i)
    "test_json_constraint4" CHECK ((JSON_QUERY(js FORMAT JSONB, '$."a"' RETURNING jsonb WITH CONDITIONAL WRAPPER NULL ON EMPTY EMPTY OBJECT ON ERROR)) < '[10]'::jsonb)

SELECT check_clause
FROM information_schema.check_constraints
WHERE constraint_name LIKE 'test_json_constraint%';
                                                             check_clause                                                              
---------------------------------------------------------------------------------------------------------------------------------------
 (pg_catalog.json_is_valid(js, 'any'::text, false))
 (JSON_EXISTS(js FORMAT JSONB, '$."a"' PASSING (i + 5) AS int, (i)::text AS txt, to_jsonb(ARRAY[1, 2, 3]) AS arr FALSE ON ERROR))
 ((JSON_VALUE((js)::jsonb, '$."a"' RETURNING integer DEFAULT (('12'::text || i))::integer ON EMPTY ERROR ON ERROR) > i))
 ((JSON_QUERY(js FORMAT JSONB, '$."a"' RETURNING jsonb WITH CONDITIONAL WRAPPER NULL ON EMPTY EMPTY OBJECT ON ERROR) < '[10]'::jsonb))
(4 rows)

SELECT adsrc FROM pg_attrdef WHERE adrelid = 'test_json_constraints'::regclass;
                                                    adsrc                                                    
-------------------------------------------------------------------------------------------------------------
 JSON_QUERY('[1, 2]'::jsonb, '$.[*]' RETURNING jsonb WITH UNCONDITIONAL WRAPPER NULL ON EMPTY NULL ON ERROR)
(1 row)

INSERT INTO test_json_constraints VALUES ('', 1);
ERROR:  new row for relation "test_json_constraints" violates check constraint "test_json_constraint1"
DETAIL:  Failing row contains (, 1, [1, 2]).
INSERT INTO test_json_constraints VALUES ('1', 1);
ERROR:  new row for relation "test_json_constraints" violates check constraint "test_json_constraint2"
DETAIL:  Failing row contains (1, 1, [1, 2]).
INSERT INTO test_json_constraints VALUES ('[]');
ERROR:  new row for relation "test_json_constraints" violates check constraint "test_json_constraint2"
DETAIL:  Failing row contains ([], null, [1, 2]).
INSERT INTO test_json_constraints VALUES ('{"b": 1}', 1);
ERROR:  new row for relation "test_json_constraints" violates check constraint "test_json_constraint2"
DETAIL:  Failing row contains ({"b": 1}, 1, [1, 2]).
INSERT INTO test_json_constraints VALUES ('{"a": 1}', 1);
ERROR:  new row for relation "test_json_constraints" violates check constraint "test_json_constraint3"
DETAIL:  Failing row contains ({"a": 1}, 1, [1, 2]).
INSERT INTO test_json_constraints VALUES ('{"a": 7}', 1);
INSERT INTO test_json_constraints VALUES ('{"a": 10}', 1);
ERROR:  new row for relation "test_json_constraints" violates check constraint "test_json_constraint4"
DETAIL:  Failing row contains ({"a": 10}, 1, [1, 2]).
DROP TABLE test_json_constraints;
-- JSON_TABLE
-- Should fail (JSON_TABLE can be used only in FROM clause)
SELECT JSON_TABLE('[]', '$');
ERROR:  syntax error at or near "("
LINE 1: SELECT JSON_TABLE('[]', '$');
                         ^
-- Should fail (no columns)
SELECT * FROM JSON_TABLE(NULL, '$' COLUMNS ());
ERROR:  syntax error at or near ")"
LINE 1: SELECT * FROM JSON_TABLE(NULL, '$' COLUMNS ());
                                                    ^
-- NULL => empty table
SELECT * FROM JSON_TABLE(NULL, '$' COLUMNS (foo int)) bar;
 foo 
-----
(0 rows)

-- invalid json => empty table
SELECT * FROM JSON_TABLE('', '$' COLUMNS (foo int)) bar;
 foo 
-----
(0 rows)

SELECT * FROM JSON_TABLE('' FORMAT JSON,  '$' COLUMNS (foo int)) bar;
ERROR:  JSON_TABLE is not yet implemented for json type
LINE 1: SELECT * FROM JSON_TABLE('' FORMAT JSON,  '$' COLUMNS (foo i...
                                    ^
SELECT * FROM JSON_TABLE('' FORMAT JSONB, '$' COLUMNS (foo int)) bar;
ERROR:  invalid input syntax for type json
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
-- invalid json => error
SELECT * FROM JSON_TABLE('' FORMAT JSONB, '$' COLUMNS (foo int) ERROR ON ERROR) bar;
ERROR:  invalid input syntax for type json
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
--
SELECT * FROM JSON_TABLE('123', '$'
	COLUMNS (item int PATH '$', foo int)) bar;
 item | foo 
------+-----
  123 |    
(1 row)

SELECT * FROM JSON_TABLE('123' FORMAT JSONB, '$'
	COLUMNS (item int PATH '$', foo int)) bar;
 item | foo 
------+-----
  123 |    
(1 row)

SELECT * FROM JSON_TABLE(jsonb '123', '$'
	COLUMNS (item int PATH '$', foo int)) bar;
 item | foo 
------+-----
  123 |    
(1 row)

-- JSON_TABLE: basic functionality
SELECT *
FROM
	(VALUES
		('1'),
		('[]'),
		('{}'),
		('[1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""]'),
		('err')
	) vals(js)
	LEFT OUTER JOIN
-- JSON_TABLE is implicitly lateral
	JSON_TABLE(
		vals.js, 'lax $[*]'
		COLUMNS (
			id FOR ORDINALITY,
			id2 FOR ORDINALITY, -- allowed additional ordinality columns
			"int" int PATH '$',
			"text" text PATH '$',
			"char(4)" char(4) PATH '$',
			"bool" bool PATH '$',
			"numeric" numeric PATH '$',
			js json PATH '$',
			jb jsonb PATH '$',
			jst text    FORMAT JSON  PATH '$',
			jsc char(4) FORMAT JSON  PATH '$',
			jsv varchar(4) FORMAT JSON  PATH '$',
			jsb jsonb   FORMAT JSONB PATH '$',
			aaa int, -- implicit path '$."aaa"',
			aaa1 int PATH '$.aaa'
		)
	) jt
	ON true;
                                       js                                       | id | id2 | int |  text   | char(4) | bool | numeric |  js   |   jb   |     jst      | jsc  | jsv  |     jsb      | aaa | aaa1 
--------------------------------------------------------------------------------+----+-----+-----+---------+---------+------+---------+-------+--------+--------------+------+------+--------------+-----+------
 1                                                                              |  1 |   1 |   1 | 1       | 1       | t    |       1 | 1     | 1      | 1            | 1    | 1    | 1            |     |     
 []                                                                             |    |     |     |         |         |      |         |       |        |              |      |      |              |     |     
 {}                                                                             |  1 |   1 |     |         |         |      |         |       |        | {}           | {}   | {}   | {}           |     |     
 [1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""] |  1 |   1 |   1 | 1       | 1       | t    |       1 | 1     | 1      | 1            | 1    | 1    | 1            |     |     
 [1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""] |  2 |   2 |     | 1.23    | 1.23    |      |    1.23 | 1.23  | 1.23   | 1.23         | 1.23 | 1.23 | 1.23         |     |     
 [1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""] |  3 |   3 |   2 | 2       | 2       |      |       2 | 2     | 2      | "2"          | "2"  | "2"  | "2"          |     |     
 [1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""] |  4 |   4 |     | aaaaaaa |         |      |         |       |        | "aaaaaaa"    |      |      | "aaaaaaa"    |     |     
 [1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""] |  5 |   5 |     |         |         |      |         |       |        | null         | null | null | null         |     |     
 [1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""] |  6 |   6 |     | false   |         | f    |         | false | false  | false        |      |      | false        |     |     
 [1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""] |  7 |   7 |     | true    | true    | t    |         | true  | true   | true         | true | true | true         |     |     
 [1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""] |  8 |   8 |     |         |         |      |         |       |        | {"aaa": 123} |      |      | {"aaa": 123} | 123 |  123
 [1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""] |  9 |   9 |     | [1,2]   |         |      |         | [1,2] | [1, 2] | "[1,2]"      |      |      | "[1,2]"      |     |     
 [1, 1.23, "2", "aaaaaaa", null, false, true, {"aaa": 123}, "[1,2]", "\"str\""] | 10 |  10 |     | "str"   |         |      |         | "str" | "str"  | "\"str\""    |      |      | "\"str\""    |     |     
 err                                                                            |    |     |     |         |         |      |         |       |        |              |      |      |              |     |     
(14 rows)

-- JSON_TABLE: ON EMPTY/ON ERROR behavior
SELECT *
FROM
	(VALUES ('1'), ('err'), ('"err"')) vals(js),
	JSON_TABLE(vals.js, '$' COLUMNS (a int PATH '$')) jt;
  js   | a 
-------+---
 1     | 1
 "err" |  
(2 rows)

SELECT *
FROM
	(VALUES ('1'), ('err'), ('"err"')) vals(js)
		LEFT OUTER JOIN
	JSON_TABLE(vals.js, '$' COLUMNS (a int PATH '$') ERROR ON ERROR) jt
		ON true;
ERROR:  invalid input syntax for type json
DETAIL:  Token "err" is invalid.
CONTEXT:  JSON data, line 1: err
SELECT *
FROM
	(VALUES ('1'), ('err'), ('"err"')) vals(js)
		LEFT OUTER JOIN
	JSON_TABLE(vals.js, '$' COLUMNS (a int PATH '$' ERROR ON ERROR)) jt
		ON true;
ERROR:  invalid input syntax for integer: "err"
SELECT * FROM JSON_TABLE('1', '$' COLUMNS (a int PATH '$.a' ERROR ON EMPTY)) jt;
 a 
---
  
(1 row)

SELECT * FROM JSON_TABLE('1', '$' COLUMNS (a int PATH '$.a' ERROR ON EMPTY)) jt;
 a 
---
  
(1 row)

SELECT * FROM JSON_TABLE('1', '$' COLUMNS (a int PATH '$.a' ERROR ON EMPTY) ERROR ON ERROR) jt;
ERROR:  SQL/JSON member not found
SELECT * FROM JSON_TABLE('1', '$' COLUMNS (a int PATH 'lax $.a' ERROR ON EMPTY) ERROR ON ERROR) jt;
ERROR:  no SQL/JSON item
SELECT * FROM JSON_TABLE('"a"', '$' COLUMNS (a int PATH '$'   DEFAULT 1 ON EMPTY DEFAULT 2 ON ERROR)) jt;
 a 
---
 2
(1 row)

SELECT * FROM JSON_TABLE('"a"', '$' COLUMNS (a int PATH '$.a' DEFAULT 1 ON EMPTY DEFAULT 2 ON ERROR)) jt;
 a 
---
 2
(1 row)

SELECT * FROM JSON_TABLE('"a"', '$' COLUMNS (a int PATH 'lax $.a' DEFAULT 1 ON EMPTY DEFAULT 2 ON ERROR)) jt;
 a 
---
 1
(1 row)

-- JSON_TABLE: nested paths and plans
-- Should fail (JSON_TABLE columns shall contain explicit AS path
-- specifications if explicit PLAN clause is used)
SELECT * FROM JSON_TABLE(
	jsonb '[]', '$' -- AS <path name> required here
	COLUMNS (
		foo int PATH '$'
	)
	PLAN DEFAULT (UNION)
) jt;
ERROR:  invalid JSON_TABLE expression
LINE 2:  jsonb '[]', '$' 
         ^
DETAIL:  JSON_TABLE columns shall contain explicit AS pathname specification if explicit PLAN clause is used
SELECT * FROM JSON_TABLE(
	jsonb '[]', '$' AS path1
	COLUMNS (
		NESTED PATH '$' COLUMNS ( -- AS <path name> required here
			foo int PATH '$'
		)
	)
	PLAN DEFAULT (UNION)
) jt;
ERROR:  invalid JSON_TABLE expression
LINE 4:   NESTED PATH '$' COLUMNS ( 
          ^
DETAIL:  JSON_TABLE columns shall contain explicit AS pathname specification if explicit PLAN clause is used
-- Should fail (column names anf path names shall be distinct)
SELECT * FROM JSON_TABLE(
	jsonb '[]', '$' AS a
	COLUMNS (
		a int
	)
) jt;
ERROR:  duplicate JSON_TABLE column name: a
HINT:  JSON_TABLE path names and column names shall be distinct from one another
SELECT * FROM JSON_TABLE(
	jsonb '[]', '$' AS a
	COLUMNS (
		b int,
		NESTED PATH '$' AS a
		COLUMNS (
			c int
		)
	)
) jt;
ERROR:  duplicate JSON_TABLE column name: a
HINT:  JSON_TABLE path names and column names shall be distinct from one another
SELECT * FROM JSON_TABLE(
	jsonb '[]', '$'
	COLUMNS (
		b int,
		NESTED PATH '$' AS b
		COLUMNS (
			c int
		)
	)
) jt;
ERROR:  duplicate JSON_TABLE column name: b
HINT:  JSON_TABLE path names and column names shall be distinct from one another
SELECT * FROM JSON_TABLE(
	jsonb '[]', '$'
	COLUMNS (
		NESTED PATH '$' AS a
		COLUMNS (
			b int
		),
		NESTED PATH '$'
		COLUMNS (
			NESTED PATH '$' AS a
			COLUMNS (
				c int
			)
		)
	)
) jt;
ERROR:  duplicate JSON_TABLE column name: a
HINT:  JSON_TABLE path names and column names shall be distinct from one another
-- JSON_TABLE: plan validation
SELECT * FROM JSON_TABLE(
	'null', '$[*]' AS p0
	COLUMNS (
		NESTED PATH '$' AS p1 COLUMNS (
			NESTED PATH '$' AS p11 COLUMNS ( foo int ),
			NESTED PATH '$' AS p12 COLUMNS ( bar int )
		),
		NESTED PATH '$' AS p2 COLUMNS (
			NESTED PATH '$' AS p21 COLUMNS ( baz int )
		)
	)
	PLAN (p1)
) jt;
ERROR:  invalid JSON_TABLE plan
LINE 12:  PLAN (p1)
                ^
DETAIL:  path name mismatch: expected p0 but p1 is given
SELECT * FROM JSON_TABLE(
	'null', '$[*]' AS p0
	COLUMNS (
		NESTED PATH '$' AS p1 COLUMNS (
			NESTED PATH '$' AS p11 COLUMNS ( foo int ),
			NESTED PATH '$' AS p12 COLUMNS ( bar int )
		),
		NESTED PATH '$' AS p2 COLUMNS (
			NESTED PATH '$' AS p21 COLUMNS ( baz int )
		)
	)
	PLAN (p0)
) jt;
ERROR:  invalid JSON_TABLE plan
LINE 4:   NESTED PATH '$' AS p1 COLUMNS (
          ^
DETAIL:  plan node for nested path p1 was not found in plan
SELECT * FROM JSON_TABLE(
	'null', '$[*]' AS p0
	COLUMNS (
		NESTED PATH '$' AS p1 COLUMNS (
			NESTED PATH '$' AS p11 COLUMNS ( foo int ),
			NESTED PATH '$' AS p12 COLUMNS ( bar int )
		),
		NESTED PATH '$' AS p2 COLUMNS (
			NESTED PATH '$' AS p21 COLUMNS ( baz int )
		)
	)
	PLAN (p0 OUTER p3)
) jt;
ERROR:  invalid JSON_TABLE plan
LINE 4:   NESTED PATH '$' AS p1 COLUMNS (
          ^
DETAIL:  plan node for nested path p1 was not found in plan
SELECT * FROM JSON_TABLE(
	'null', '$[*]' AS p0
	COLUMNS (
		NESTED PATH '$' AS p1 COLUMNS (
			NESTED PATH '$' AS p11 COLUMNS ( foo int ),
			NESTED PATH '$' AS p12 COLUMNS ( bar int )
		),
		NESTED PATH '$' AS p2 COLUMNS (
			NESTED PATH '$' AS p21 COLUMNS ( baz int )
		)
	)
	PLAN (p0 OUTER (p1 CROSS p13))
) jt;
ERROR:  invalid JSON_TABLE plan
LINE 8:   NESTED PATH '$' AS p2 COLUMNS (
          ^
DETAIL:  plan node for nested path p2 was not found in plan
SELECT * FROM JSON_TABLE(
	'null', '$[*]' AS p0
	COLUMNS (
		NESTED PATH '$' AS p1 COLUMNS (
			NESTED PATH '$' AS p11 COLUMNS ( foo int ),
			NESTED PATH '$' AS p12 COLUMNS ( bar int )
		),
		NESTED PATH '$' AS p2 COLUMNS (
			NESTED PATH '$' AS p21 COLUMNS ( baz int )
		)
	)
	PLAN (p0 OUTER (p1 CROSS p2))
) jt;
ERROR:  invalid JSON_TABLE plan
LINE 5:    NESTED PATH '$' AS p11 COLUMNS ( foo int ),
           ^
DETAIL:  plan node for nested path p11 was not found in plan
SELECT * FROM JSON_TABLE(
	'null', '$[*]' AS p0
	COLUMNS (
		NESTED PATH '$' AS p1 COLUMNS (
			NESTED PATH '$' AS p11 COLUMNS ( foo int ),
			NESTED PATH '$' AS p12 COLUMNS ( bar int )
		),
		NESTED PATH '$' AS p2 COLUMNS (
			NESTED PATH '$' AS p21 COLUMNS ( baz int )
		)
	)
	PLAN (p0 OUTER ((p1 UNION p11) CROSS p2))
) jt;
ERROR:  invalid JSON_TABLE plan
LINE 12:  PLAN (p0 OUTER ((p1 UNION p11) CROSS p2))
                         ^
DETAIL:  plan node contains some extra or duplicate sibling nodes
SELECT * FROM JSON_TABLE(
	'null', '$[*]' AS p0
	COLUMNS (
		NESTED PATH '$' AS p1 COLUMNS (
			NESTED PATH '$' AS p11 COLUMNS ( foo int ),
			NESTED PATH '$' AS p12 COLUMNS ( bar int )
		),
		NESTED PATH '$' AS p2 COLUMNS (
			NESTED PATH '$' AS p21 COLUMNS ( baz int )
		)
	)
	PLAN (p0 OUTER ((p1 INNER p11) CROSS p2))
) jt;
ERROR:  invalid JSON_TABLE plan
LINE 6:    NESTED PATH '$' AS p12 COLUMNS ( bar int )
           ^
DETAIL:  plan node for nested path p12 was not found in plan
SELECT * FROM JSON_TABLE(
	'null', '$[*]' AS p0
	COLUMNS (
		NESTED PATH '$' AS p1 COLUMNS (
			NESTED PATH '$' AS p11 COLUMNS ( foo int ),
			NESTED PATH '$' AS p12 COLUMNS ( bar int )
		),
		NESTED PATH '$' AS p2 COLUMNS (
			NESTED PATH '$' AS p21 COLUMNS ( baz int )
		)
	)
	PLAN (p0 OUTER ((p1 INNER (p12 CROSS p11)) CROSS p2))
) jt;
ERROR:  invalid JSON_TABLE plan
LINE 9:    NESTED PATH '$' AS p21 COLUMNS ( baz int )
           ^
DETAIL:  plan node for nested path p21 was not found in plan
SELECT * FROM JSON_TABLE(
	'null', '$[*]' AS p0
	COLUMNS (
		NESTED PATH '$' AS p1 COLUMNS (
			NESTED PATH '$' AS p11 COLUMNS ( foo int ),
			NESTED PATH '$' AS p12 COLUMNS ( bar int )
		),
		NESTED PATH '$' AS p2 COLUMNS (
			NESTED PATH '$' AS p21 COLUMNS ( baz int )
		)
	)
	PLAN (p0 OUTER ((p1 INNER (p12 CROSS p11)) CROSS (p2 INNER p21)))
) jt;
 foo | bar | baz 
-----+-----+-----
(0 rows)

SELECT * FROM JSON_TABLE(
	'null', '$[*]' -- without root path name
	COLUMNS (
		NESTED PATH '$' AS p1 COLUMNS (
			NESTED PATH '$' AS p11 COLUMNS ( foo int ),
			NESTED PATH '$' AS p12 COLUMNS ( bar int )
		),
		NESTED PATH '$' AS p2 COLUMNS (
			NESTED PATH '$' AS p21 COLUMNS ( baz int )
		)
	)
	PLAN ((p1 INNER (p12 CROSS p11)) CROSS (p2 INNER p21))
) jt;
 foo | bar | baz 
-----+-----+-----
(0 rows)

-- JSON_TABLE: plan execution
CREATE TEMP TABLE json_table_test (js text);
INSERT INTO json_table_test
VALUES (
	'[
		{"a":  1,  "b": [], "c": []},
		{"a":  2,  "b": [1, 2, 3], "c": [10, null, 20]},
		{"a":  3,  "b": [1, 2], "c": []}, 
		{"x": "4", "b": [1, 2], "c": 123}
	 ]'
);
-- unspecified plan (outer, union)
select
	jt.*
from
	json_table_test jtt,
	json_table (
		jtt.js,'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on empty,
			nested path '$.b[*]' as pb columns ( b int path '$' ),
			nested path '$.c[*]' as pc columns ( c int path '$' )
		)
	) jt;
 n | a  | b | c  
---+----+---+----
 1 |  1 |   |   
 2 |  2 |   | 10
 2 |  2 |   |   
 2 |  2 |   | 20
 2 |  2 | 1 |   
 2 |  2 | 2 |   
 2 |  2 | 3 |   
 3 |  3 | 1 |   
 3 |  3 | 2 |   
 4 | -1 | 1 |   
 4 | -1 | 2 |   
(11 rows)

-- default plan (outer, union)
select
	jt.*
from
	json_table_test jtt,
	json_table (
		jtt.js,'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on empty,
			nested path '$.b[*]' as pb columns ( b int path '$' ),
			nested path '$.c[*]' as pc columns ( c int path '$' )
		)
		plan default (outer, union)
	) jt;
 n | a  | b | c  
---+----+---+----
 1 |  1 |   |   
 2 |  2 |   | 10
 2 |  2 |   |   
 2 |  2 |   | 20
 2 |  2 | 1 |   
 2 |  2 | 2 |   
 2 |  2 | 3 |   
 3 |  3 | 1 |   
 3 |  3 | 2 |   
 4 | -1 | 1 |   
 4 | -1 | 2 |   
(11 rows)

-- specific plan (p outer (pb union pc))
select
	jt.*
from
	json_table_test jtt,
	json_table (
		jtt.js,'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on empty,
			nested path '$.b[*]' as pb columns ( b int path '$' ),
			nested path '$.c[*]' as pc columns ( c int path '$' )
		)
		plan (p outer (pb union pc))
	) jt;
 n | a  | b | c  
---+----+---+----
 1 |  1 |   |   
 2 |  2 |   | 10
 2 |  2 |   |   
 2 |  2 |   | 20
 2 |  2 | 1 |   
 2 |  2 | 2 |   
 2 |  2 | 3 |   
 3 |  3 | 1 |   
 3 |  3 | 2 |   
 4 | -1 | 1 |   
 4 | -1 | 2 |   
(11 rows)

-- specific plan (p outer (pc union pb))
select
	jt.*
from
	json_table_test jtt,
	json_table (
		jtt.js,'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on empty,
			nested path '$.b[*]' as pb columns ( b int path '$' ),
			nested path '$.c[*]' as pc columns ( c int path '$' )
		)
		plan (p outer (pc union pb))
	) jt;
 n | a  | b | c  
---+----+---+----
 1 |  1 |   |   
 2 |  2 | 1 |   
 2 |  2 | 2 |   
 2 |  2 | 3 |   
 2 |  2 |   | 10
 2 |  2 |   |   
 2 |  2 |   | 20
 3 |  3 | 1 |   
 3 |  3 | 2 |   
 4 | -1 | 1 |   
 4 | -1 | 2 |   
(11 rows)

-- default plan (inner, union)
select
	jt.*
from
	json_table_test jtt,
	json_table (
		jtt.js,'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on empty,
			nested path '$.b[*]' as pb columns ( b int path '$' ),
			nested path '$.c[*]' as pc columns ( c int path '$' )
		)
		plan default (inner)
	) jt;
 n | a  | b | c  
---+----+---+----
 2 |  2 |   | 10
 2 |  2 |   |   
 2 |  2 |   | 20
 2 |  2 | 1 |   
 2 |  2 | 2 |   
 2 |  2 | 3 |   
 3 |  3 | 1 |   
 3 |  3 | 2 |   
 4 | -1 | 1 |   
 4 | -1 | 2 |   
(10 rows)

-- specific plan (p inner (pb union pc))
select
	jt.*
from
	json_table_test jtt,
	json_table (
		jtt.js,'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on empty,
			nested path '$.b[*]' as pb columns ( b int path '$' ),
			nested path '$.c[*]' as pc columns ( c int path '$' )
		)
		plan (p inner (pb union pc))
	) jt;
 n | a  | b | c  
---+----+---+----
 2 |  2 |   | 10
 2 |  2 |   |   
 2 |  2 |   | 20
 2 |  2 | 1 |   
 2 |  2 | 2 |   
 2 |  2 | 3 |   
 3 |  3 | 1 |   
 3 |  3 | 2 |   
 4 | -1 | 1 |   
 4 | -1 | 2 |   
(10 rows)

-- default plan (inner, cross)
select
	jt.*
from
	json_table_test jtt,
	json_table (
		jtt.js,'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on empty,
			nested path '$.b[*]' as pb columns ( b int path '$' ),
			nested path '$.c[*]' as pc columns ( c int path '$' )
		)
		plan default (cross, inner)
	) jt;
 n | a | b | c  
---+---+---+----
 2 | 2 | 1 | 10
 2 | 2 | 1 |   
 2 | 2 | 1 | 20
 2 | 2 | 2 | 10
 2 | 2 | 2 |   
 2 | 2 | 2 | 20
 2 | 2 | 3 | 10
 2 | 2 | 3 |   
 2 | 2 | 3 | 20
(9 rows)

-- specific plan (p inner (pb cross pc))
select
	jt.*
from
	json_table_test jtt,
	json_table (
		jtt.js,'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on empty,
			nested path '$.b[*]' as pb columns ( b int path '$' ),
			nested path '$.c[*]' as pc columns ( c int path '$' )
		)
		plan (p inner (pb cross pc))
	) jt;
 n | a | b | c  
---+---+---+----
 2 | 2 | 1 | 10
 2 | 2 | 1 |   
 2 | 2 | 1 | 20
 2 | 2 | 2 | 10
 2 | 2 | 2 |   
 2 | 2 | 2 | 20
 2 | 2 | 3 | 10
 2 | 2 | 3 |   
 2 | 2 | 3 | 20
(9 rows)

-- default plan (outer, cross)
select
	jt.*
from
	json_table_test jtt,
	json_table (
		jtt.js,'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on empty,
			nested path '$.b[*]' as pb columns ( b int path '$' ),
			nested path '$.c[*]' as pc columns ( c int path '$' )
		)
		plan default (outer, cross)
	) jt;
 n | a  | b | c  
---+----+---+----
 1 |  1 |   |   
 2 |  2 | 1 | 10
 2 |  2 | 1 |   
 2 |  2 | 1 | 20
 2 |  2 | 2 | 10
 2 |  2 | 2 |   
 2 |  2 | 2 | 20
 2 |  2 | 3 | 10
 2 |  2 | 3 |   
 2 |  2 | 3 | 20
 3 |  3 |   |   
 4 | -1 |   |   
(12 rows)

-- specific plan (p outer (pb cross pc))
select
	jt.*
from
	json_table_test jtt,
	json_table (
		jtt.js,'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on empty,
			nested path '$.b[*]' as pb columns ( b int path '$' ),
			nested path '$.c[*]' as pc columns ( c int path '$' )
		)
		plan (p outer (pb cross pc))
	) jt;
 n | a  | b | c  
---+----+---+----
 1 |  1 |   |   
 2 |  2 | 1 | 10
 2 |  2 | 1 |   
 2 |  2 | 1 | 20
 2 |  2 | 2 | 10
 2 |  2 | 2 |   
 2 |  2 | 2 | 20
 2 |  2 | 3 | 10
 2 |  2 | 3 |   
 2 |  2 | 3 | 20
 3 |  3 |   |   
 4 | -1 |   |   
(12 rows)

select
	jt.*, b1 + 100 as b
from
	json_table (
		'[
			{"a":  1,  "b": [[1, 10], [2], [3, 30, 300]], "c": [1, null, 2]},
			{"a":  2,  "b": [10, 20], "c": [1, null, 2]}, 
			{"x": "3", "b": [11, 22, 33, 44]}
		 ]', 
		'$[*]' as p
		columns (
			n for ordinality,
			a int path 'lax $.a' default -1 on error,
			nested path '$.b[*]' as pb columns (
				b text format json path '$', 
				nested path '$[*]' as pb1 columns (
					b1 int path '$'
				)
			),
			nested path '$.c[*]' as pc columns (
				c text format json path '$',
				nested path '$[*]' as pc1 columns (
					c1 int path '$'
				)
			)
		)
		--plan default(outer, cross)
		plan(p outer ((pb inner pb1) cross (pc outer pc1)))
	) jt;
 n | a |      b       | b1  |  c   | c1 |  b  
---+---+--------------+-----+------+----+-----
 1 | 1 | [1, 10]      |   1 | 1    |    | 101
 1 | 1 | [1, 10]      |   1 | null |    | 101
 1 | 1 | [1, 10]      |   1 | 2    |    | 101
 1 | 1 | [1, 10]      |  10 | 1    |    | 110
 1 | 1 | [1, 10]      |  10 | null |    | 110
 1 | 1 | [1, 10]      |  10 | 2    |    | 110
 1 | 1 | [2]          |   2 | 1    |    | 102
 1 | 1 | [2]          |   2 | null |    | 102
 1 | 1 | [2]          |   2 | 2    |    | 102
 1 | 1 | [3, 30, 300] |   3 | 1    |    | 103
 1 | 1 | [3, 30, 300] |   3 | null |    | 103
 1 | 1 | [3, 30, 300] |   3 | 2    |    | 103
 1 | 1 | [3, 30, 300] |  30 | 1    |    | 130
 1 | 1 | [3, 30, 300] |  30 | null |    | 130
 1 | 1 | [3, 30, 300] |  30 | 2    |    | 130
 1 | 1 | [3, 30, 300] | 300 | 1    |    | 400
 1 | 1 | [3, 30, 300] | 300 | null |    | 400
 1 | 1 | [3, 30, 300] | 300 | 2    |    | 400
 2 | 2 |              |     |      |    |    
 3 |   |              |     |      |    |    
(20 rows)

-- Should succeed (JSON arguments are passed to root and nested paths)
SELECT *
FROM
	generate_series(1, 4) x,
	generate_series(1, 3) y,
	JSON_TABLE(
		'[[1,2,3],[2,3,4,5],[3,4,5,6]]',
		'$[*] ? (@.[*] < $x)'
		PASSING x AS x, y AS y
		COLUMNS (
			y text FORMAT JSON PATH '$',
			NESTED PATH '$[*] ? (@ >= $y)'
			COLUMNS (
				z int PATH '$'
			)
		)
	) jt;
 x | y |      y       | z 
---+---+--------------+---
 2 | 1 | [1, 2, 3]    | 1
 2 | 1 | [1, 2, 3]    | 2
 2 | 1 | [1, 2, 3]    | 3
 3 | 1 | [1, 2, 3]    | 1
 3 | 1 | [1, 2, 3]    | 2
 3 | 1 | [1, 2, 3]    | 3
 3 | 1 | [2, 3, 4, 5] | 2
 3 | 1 | [2, 3, 4, 5] | 3
 3 | 1 | [2, 3, 4, 5] | 4
 3 | 1 | [2, 3, 4, 5] | 5
 4 | 1 | [1, 2, 3]    | 1
 4 | 1 | [1, 2, 3]    | 2
 4 | 1 | [1, 2, 3]    | 3
 4 | 1 | [2, 3, 4, 5] | 2
 4 | 1 | [2, 3, 4, 5] | 3
 4 | 1 | [2, 3, 4, 5] | 4
 4 | 1 | [2, 3, 4, 5] | 5
 4 | 1 | [3, 4, 5, 6] | 3
 4 | 1 | [3, 4, 5, 6] | 4
 4 | 1 | [3, 4, 5, 6] | 5
 4 | 1 | [3, 4, 5, 6] | 6
 2 | 2 | [1, 2, 3]    | 2
 2 | 2 | [1, 2, 3]    | 3
 3 | 2 | [1, 2, 3]    | 2
 3 | 2 | [1, 2, 3]    | 3
 3 | 2 | [2, 3, 4, 5] | 2
 3 | 2 | [2, 3, 4, 5] | 3
 3 | 2 | [2, 3, 4, 5] | 4
 3 | 2 | [2, 3, 4, 5] | 5
 4 | 2 | [1, 2, 3]    | 2
 4 | 2 | [1, 2, 3]    | 3
 4 | 2 | [2, 3, 4, 5] | 2
 4 | 2 | [2, 3, 4, 5] | 3
 4 | 2 | [2, 3, 4, 5] | 4
 4 | 2 | [2, 3, 4, 5] | 5
 4 | 2 | [3, 4, 5, 6] | 3
 4 | 2 | [3, 4, 5, 6] | 4
 4 | 2 | [3, 4, 5, 6] | 5
 4 | 2 | [3, 4, 5, 6] | 6
 2 | 3 | [1, 2, 3]    | 3
 3 | 3 | [1, 2, 3]    | 3
 3 | 3 | [2, 3, 4, 5] | 3
 3 | 3 | [2, 3, 4, 5] | 4
 3 | 3 | [2, 3, 4, 5] | 5
 4 | 3 | [1, 2, 3]    | 3
 4 | 3 | [2, 3, 4, 5] | 3
 4 | 3 | [2, 3, 4, 5] | 4
 4 | 3 | [2, 3, 4, 5] | 5
 4 | 3 | [3, 4, 5, 6] | 3
 4 | 3 | [3, 4, 5, 6] | 4
 4 | 3 | [3, 4, 5, 6] | 5
 4 | 3 | [3, 4, 5, 6] | 6
(52 rows)

-- Should fail (JSON arguments are not passed to column paths)
SELECT *
FROM JSON_TABLE(
	'[1,2,3]',
	'$[*] ? (@ < $x)'
		PASSING 10 AS x
		COLUMNS (y text FORMAT JSON PATH '$ ? (@ < $x)')
	) jt;
ERROR:  could not find 'x' passed variable
--jsonpath io
select '$'::jsonpath;
 jsonpath 
----------
 $
(1 row)

select 'strict $'::jsonpath;
 jsonpath 
----------
 $
(1 row)

select 'lax $'::jsonpath;
 jsonpath 
----------
 lax $
(1 row)

select '$.a'::jsonpath;
 jsonpath 
----------
 $."a"
(1 row)

select '$.a.v'::jsonpath;
 jsonpath  
-----------
 $."a"."v"
(1 row)

select '$.a.*'::jsonpath;
 jsonpath 
----------
 $."a".*
(1 row)

select '$.*.[*]'::jsonpath;
 jsonpath 
----------
 $.*.[*]
(1 row)

select '$.*[*]'::jsonpath;
 jsonpath 
----------
 $.*.[*]
(1 row)

select '$.a.[*]'::jsonpath;
 jsonpath  
-----------
 $."a".[*]
(1 row)

select '$.a[*]'::jsonpath;
 jsonpath  
-----------
 $."a".[*]
(1 row)

select '$.a.[*][*]'::jsonpath;
   jsonpath    
---------------
 $."a".[*].[*]
(1 row)

select '$.a.[*].[*]'::jsonpath;
   jsonpath    
---------------
 $."a".[*].[*]
(1 row)

select '$.a[*][*]'::jsonpath;
   jsonpath    
---------------
 $."a".[*].[*]
(1 row)

select '$.a[*].[*]'::jsonpath;
   jsonpath    
---------------
 $."a".[*].[*]
(1 row)

select '$[*]'::jsonpath;
 jsonpath 
----------
 $.[*]
(1 row)

select '$[0]'::jsonpath;
 jsonpath 
----------
 $.[0]
(1 row)

select '$[*][0]'::jsonpath;
 jsonpath  
-----------
 $.[*].[0]
(1 row)

select '$[*].a'::jsonpath;
 jsonpath  
-----------
 $.[*]."a"
(1 row)

select '$[*][0].a.b'::jsonpath;
     jsonpath      
-------------------
 $.[*].[0]."a"."b"
(1 row)

select '$.a.**.b'::jsonpath;
   jsonpath   
--------------
 $."a".**."b"
(1 row)

select '$.a.**{2}.b'::jsonpath;
    jsonpath     
-----------------
 $."a".**{2}."b"
(1 row)

select '$.a.**{2,2}.b'::jsonpath;
    jsonpath     
-----------------
 $."a".**{2}."b"
(1 row)

select '$.a.**{2,5}.b'::jsonpath;
     jsonpath      
-------------------
 $."a".**{2,5}."b"
(1 row)

select '$.a.**{,5}.b'::jsonpath;
     jsonpath     
------------------
 $."a".**{,5}."b"
(1 row)

select '$.a.**{5,}.b'::jsonpath;
     jsonpath     
------------------
 $."a".**{5,}."b"
(1 row)

select '$.g ? ($.a == 1)'::jsonpath;
      jsonpath      
--------------------
 $."g"?($."a" == 1)
(1 row)

select '$.g ? (@ == 1)'::jsonpath;
    jsonpath    
----------------
 $."g"?(@ == 1)
(1 row)

select '$.g ? (a == 1)'::jsonpath;
     jsonpath     
------------------
 $."g"?("a" == 1)
(1 row)

select '$.g ? (.a == 1)'::jsonpath;
      jsonpath      
--------------------
 $."g"?(@."a" == 1)
(1 row)

select '$.g ? (@.a == 1)'::jsonpath;
      jsonpath      
--------------------
 $."g"?(@."a" == 1)
(1 row)

select '$.g ? (@.a == 1 || a == 4)'::jsonpath;
            jsonpath            
--------------------------------
 $."g"?(@."a" == 1 || "a" == 4)
(1 row)

select '$.g ? (@.a == 1 && a == 4)'::jsonpath;
            jsonpath            
--------------------------------
 $."g"?(@."a" == 1 && "a" == 4)
(1 row)

select '$.g ? (@.a == 1 || a == 4 && b == 7)'::jsonpath;
                  jsonpath                  
--------------------------------------------
 $."g"?(@."a" == 1 || "a" == 4 && "b" == 7)
(1 row)

select '$.g ? (@.a == 1 || !(a == 4) && b == 7)'::jsonpath;
                   jsonpath                    
-----------------------------------------------
 $."g"?(@."a" == 1 || !("a" == 4) && "b" == 7)
(1 row)

select '$.g ? (@.a == 1 || !(x >= 123 || a == 4) && b == 7)'::jsonpath;
                          jsonpath                           
-------------------------------------------------------------
 $."g"?(@."a" == 1 || !("x" >= 123 || "a" == 4) && "b" == 7)
(1 row)

select '$.g ? (.x >= @[*]?(@.a > "abc"))'::jsonpath;
                jsonpath                
----------------------------------------
 $."g"?(@."x" >= @.[*]?(@."a" > "abc"))
(1 row)

select '$.g ? ((x >= 123 || a == 4) is unknown)'::jsonpath;
                  jsonpath                   
---------------------------------------------
 $."g"?(("x" >= 123 || "a" == 4) is unknown)
(1 row)

select '$.g ? (exists (.x))'::jsonpath;
        jsonpath        
------------------------
 $."g"?(exists (@."x"))
(1 row)

select '$.g ? (exists (@.x ? (@ == 14)))'::jsonpath;
             jsonpath             
----------------------------------
 $."g"?(exists (@."x"?(@ == 14)))
(1 row)

select '$.g ? (exists (.x ? (@ == 14)))'::jsonpath;
             jsonpath             
----------------------------------
 $."g"?(exists (@."x"?(@ == 14)))
(1 row)

select '$.g ? ((x >= 123 || a == 4) && exists (.x ? (@ == 14)))'::jsonpath;
                           jsonpath                           
--------------------------------------------------------------
 $."g"?(("x" >= 123 || "a" == 4) && exists (@."x"?(@ == 14)))
(1 row)

select '$.g ? (+x >= +-(+a + 2))'::jsonpath;
            jsonpath            
--------------------------------
 $."g"?(+"x" >= +(-(+"a" + 2)))
(1 row)

select '$a'::jsonpath;
 jsonpath 
----------
 $"a"
(1 row)

select '$a.b'::jsonpath;
 jsonpath 
----------
 $"a"."b"
(1 row)

select '$a[*]'::jsonpath;
 jsonpath 
----------
 $"a".[*]
(1 row)

select '$.g ? (zip == $zip)'::jsonpath;
        jsonpath         
-------------------------
 $."g"?("zip" == $"zip")
(1 row)

select '$.a.[1,2, 3 to 16]'::jsonpath;
      jsonpath       
---------------------
 $."a".[1,2,3 to 16]
(1 row)

select '$.a[1,2, 3 to 16]'::jsonpath;
      jsonpath       
---------------------
 $."a".[1,2,3 to 16]
(1 row)

select '$.a[$a + 1, ($b[*]) to -(@[0] * 2)]'::jsonpath;
                 jsonpath                  
-------------------------------------------
 $."a".[$"a" + 1,$"b".[*] to -(@.[0] * 2)]
(1 row)

select '$.a[$.a.size() - 3]'::jsonpath;
         jsonpath         
--------------------------
 $."a".[$."a".size() - 3]
(1 row)

select 'last'::jsonpath;
ERROR:  LAST is allowed only in array subscripts
LINE 1: select 'last'::jsonpath;
               ^
select '"last"'::jsonpath;
 jsonpath 
----------
 "last"
(1 row)

select '$.last'::jsonpath;
 jsonpath 
----------
 $."last"
(1 row)

select '$ ? (last > 0)'::jsonpath;
ERROR:  LAST is allowed only in array subscripts
LINE 1: select '$ ? (last > 0)'::jsonpath;
               ^
select '$[last]'::jsonpath;
 jsonpath 
----------
 $.[last]
(1 row)

select '$[@ ? (last > 0)]'::jsonpath;
     jsonpath     
------------------
 $.[@?(last > 0)]
(1 row)

select 'null.type()'::jsonpath;
  jsonpath   
-------------
 null.type()
(1 row)

select '1.type()'::jsonpath;
 jsonpath 
----------
 1.type()
(1 row)

select '"aaa".type()'::jsonpath;
   jsonpath   
--------------
 "aaa".type()
(1 row)

select 'aaa.type()'::jsonpath;
   jsonpath   
--------------
 "aaa".type()
(1 row)

select 'true.type()'::jsonpath;
  jsonpath   
-------------
 true.type()
(1 row)

select '$.datetime()'::jsonpath;
   jsonpath   
--------------
 $.datetime()
(1 row)

select '$.datetime("datetime template")'::jsonpath;
            jsonpath             
---------------------------------
 $.datetime("datetime template")
(1 row)

select '$.reduce($1 + $2 + @[1])'::jsonpath;
            jsonpath             
---------------------------------
 $.reduce(($"1" + $"2") + @.[1])
(1 row)

select '$.fold($1 + $2 + @[1], 2 + 3)'::jsonpath;
               jsonpath               
--------------------------------------
 $.fold(($"1" + $"2") + @.[1], 2 + 3)
(1 row)

select '$ ? (@ starts with "abc")'::jsonpath;
        jsonpath         
-------------------------
 $?(@ starts with "abc")
(1 row)

select '$ ? (@ starts with $var)'::jsonpath;
         jsonpath         
--------------------------
 $?(@ starts with $"var")
(1 row)

select '$ < 1'::jsonpath;
 jsonpath 
----------
 ($ < 1)
(1 row)

select '($ < 1) || $.a.b <= $x'::jsonpath;
           jsonpath           
------------------------------
 ($ < 1 || $."a"."b" <= $"x")
(1 row)

select '@ + 1'::jsonpath;
ERROR:  @ is not allowed in root expressions
LINE 1: select '@ + 1'::jsonpath;
               ^
select '($).a.b'::jsonpath;
 jsonpath  
-----------
 $."a"."b"
(1 row)

select '($.a.b).c.d'::jsonpath;
     jsonpath      
-------------------
 $."a"."b"."c"."d"
(1 row)

select '($.a.b + -$.x.y).c.d'::jsonpath;
             jsonpath             
----------------------------------
 ($."a"."b" + -$."x"."y")."c"."d"
(1 row)

select '(-+$.a.b).c.d'::jsonpath;
        jsonpath         
-------------------------
 (-(+$."a"."b"))."c"."d"
(1 row)

select '1 + ($.a.b + 2).c.d'::jsonpath;
           jsonpath            
-------------------------------
 (1 + ($."a"."b" + 2)."c"."d")
(1 row)

select '1 + ($.a.b > 2).c.d'::jsonpath;
           jsonpath            
-------------------------------
 (1 + ($."a"."b" > 2)."c"."d")
(1 row)

select '1, 2 + 3, $.a[*] + 5'::jsonpath;
        jsonpath         
-------------------------
 1, 2 + 3, $."a".[*] + 5
(1 row)

select '(1, 2, $.a)'::jsonpath;
  jsonpath   
-------------
 1, 2, $."a"
(1 row)

select '(1, 2, $.a).a[*]'::jsonpath;
       jsonpath        
-----------------------
 (1, 2, $."a")."a".[*]
(1 row)

select '(1, 2, $.a) == 5'::jsonpath;
       jsonpath       
----------------------
 ((1, 2, $."a") == 5)
(1 row)

select '$[(1, 2, $.a) to (3, 4)]'::jsonpath;
          jsonpath           
-----------------------------
 $.[(1, 2, $."a") to (3, 4)]
(1 row)

select '$[(1, (2, $.a)), 3, (4, 5)]'::jsonpath;
           jsonpath           
------------------------------
 $.[(1, (2, $."a")),3,(4, 5)]
(1 row)

select '[]'::jsonpath;
 jsonpath 
----------
 []
(1 row)

select '[[1, 2], ([(3, 4, 5), 6], []), $.a[*]]'::jsonpath;
                 jsonpath                  
-------------------------------------------
 [[1, 2], ([(3, 4, 5), 6], []), $."a".[*]]
(1 row)

select '{}'::jsonpath;
 jsonpath 
----------
 {}
(1 row)

select '{a: 1 + 2}'::jsonpath;
   jsonpath   
--------------
 {"a": 1 + 2}
(1 row)

select '{a: 1 + 2, b : (1,2), c: [$[*],4,5], d: { "e e e": "f f f" }}'::jsonpath;
                                jsonpath                                
------------------------------------------------------------------------
 {"a": 1 + 2, "b": (1, 2), "c": [$.[*], 4, 5], "d": {"e e e": "f f f"}}
(1 row)

select '$ ? (a < 1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < -1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < -1)
(1 row)

select '$ ? (a < +1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < .1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < -.1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < -0.1)
(1 row)

select '$ ? (a < +.1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < 0.1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < -0.1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < -0.1)
(1 row)

select '$ ? (a < +0.1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < 10.1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 10.1)
(1 row)

select '$ ? (a < -10.1)'::jsonpath;
    jsonpath     
-----------------
 $?("a" < -10.1)
(1 row)

select '$ ? (a < +10.1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 10.1)
(1 row)

select '$ ? (a < 1e1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < 10)
(1 row)

select '$ ? (a < -1e1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < -10)
(1 row)

select '$ ? (a < +1e1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < 10)
(1 row)

select '$ ? (a < .1e1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < -.1e1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < -1)
(1 row)

select '$ ? (a < +.1e1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < 0.1e1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < -0.1e1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < -1)
(1 row)

select '$ ? (a < +0.1e1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < 10.1e1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 101)
(1 row)

select '$ ? (a < -10.1e1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < -101)
(1 row)

select '$ ? (a < +10.1e1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 101)
(1 row)

select '$ ? (a < 1e-1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < -1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < -0.1)
(1 row)

select '$ ? (a < +1e-1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 0.1)
(1 row)

select '$ ? (a < .1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 0.01)
(1 row)

select '$ ? (a < -.1e-1)'::jsonpath;
    jsonpath     
-----------------
 $?("a" < -0.01)
(1 row)

select '$ ? (a < +.1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 0.01)
(1 row)

select '$ ? (a < 0.1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 0.01)
(1 row)

select '$ ? (a < -0.1e-1)'::jsonpath;
    jsonpath     
-----------------
 $?("a" < -0.01)
(1 row)

select '$ ? (a < +0.1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 0.01)
(1 row)

select '$ ? (a < 10.1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 1.01)
(1 row)

select '$ ? (a < -10.1e-1)'::jsonpath;
    jsonpath     
-----------------
 $?("a" < -1.01)
(1 row)

select '$ ? (a < +10.1e-1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < 1.01)
(1 row)

select '$ ? (a < 1e+1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < 10)
(1 row)

select '$ ? (a < -1e+1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < -10)
(1 row)

select '$ ? (a < +1e+1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < 10)
(1 row)

select '$ ? (a < .1e+1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < -.1e+1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < -1)
(1 row)

select '$ ? (a < +.1e+1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < 0.1e+1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < -0.1e+1)'::jsonpath;
   jsonpath   
--------------
 $?("a" < -1)
(1 row)

select '$ ? (a < +0.1e+1)'::jsonpath;
  jsonpath   
-------------
 $?("a" < 1)
(1 row)

select '$ ? (a < 10.1e+1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 101)
(1 row)

select '$ ? (a < -10.1e+1)'::jsonpath;
    jsonpath    
----------------
 $?("a" < -101)
(1 row)

select '$ ? (a < +10.1e+1)'::jsonpath;
   jsonpath    
---------------
 $?("a" < 101)
(1 row)

select _jsonpath_exists('{"a": 12}', '$.a.b');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('{"a": 12}', '$.b');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('{"a": {"a": 12}}', '$.a.a');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"a": {"a": 12}}', '$.*.a');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"b": {"a": 12}}', '$.*.a');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{}', '$.*');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('{"a": 1}', '$.*');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"a": {"b": 1}}', 'lax $.**{1}');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"a": {"b": 1}}', 'lax $.**{2}');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"a": {"b": 1}}', 'lax $.**{3}');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('[]', '$.[*]');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('[1]', '$.[*]');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('[1]', '$.[1]');
ERROR:  Invalid SQL/JSON subscript
select _jsonpath_exists('[1]', 'lax $.[1]');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('[1]', '$.[0]');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('[1]', '$.[0.3]');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('[1]', '$.[0.5]');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('[1]', '$.[0.9]');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('[1]', '$.[1.2]');
ERROR:  Invalid SQL/JSON subscript
select _jsonpath_exists('{"a": [1,2,3], "b": [3,4,5]}', '$ ? (@.a[*] >  @.b[*])');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('{"a": [1,2,3], "b": [3,4,5]}', '$ ? (@.a[*] >= @.b[*])');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"a": [1,2,3], "b": [3,4,"5"]}', '$ ? (@.a[*] >= @.b[*])');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('{"a": [1,2,3], "b": [3,4,null]}', '$ ? (@.a[*] >= @.b[*])');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('1', '$ ? ((@ == "1") is unknown)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('1', '$ ? ((@ == 1) is unknown)');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('[{"a": 1}, {"a": 2}]', '$[0 to 1] ? (@.a > 1)');
 _jsonpath_exists 
------------------
 t
(1 row)

select * from _jsonpath_object('{"a": 12, "b": {"a": 13}}', '$.a');
 _jsonpath_object 
------------------
 12
(1 row)

select * from _jsonpath_object('{"a": 12, "b": {"a": 13}}', '$.b');
 _jsonpath_object 
------------------
 {"a": 13}
(1 row)

select * from _jsonpath_object('{"a": 12, "b": {"a": 13}}', '$.*');
 _jsonpath_object 
------------------
 12
 {"a": 13}
(2 rows)

select * from _jsonpath_object('{"a": 12, "b": {"a": 13}}', 'lax $.*.a');
 _jsonpath_object 
------------------
 13
(1 row)

select * from _jsonpath_object('[12, {"a": 13}, {"b": 14}]', 'lax $.[*].a');
 _jsonpath_object 
------------------
 13
(1 row)

select * from _jsonpath_object('[12, {"a": 13}, {"b": 14}]', 'lax $.[*].*');
 _jsonpath_object 
------------------
 13
 14
(2 rows)

select * from _jsonpath_object('[12, {"a": 13}, {"b": 14}]', 'lax $.[0].a');
 _jsonpath_object 
------------------
(0 rows)

select * from _jsonpath_object('[12, {"a": 13}, {"b": 14}]', 'lax $.[1].a');
 _jsonpath_object 
------------------
 13
(1 row)

select * from _jsonpath_object('[12, {"a": 13}, {"b": 14}]', 'lax $.[2].a');
 _jsonpath_object 
------------------
(0 rows)

select * from _jsonpath_object('[12, {"a": 13}, {"b": 14}]', 'lax $.[0,1].a');
 _jsonpath_object 
------------------
 13
(1 row)

select * from _jsonpath_object('[12, {"a": 13}, {"b": 14}]', 'lax $.[0 to 10].a');
 _jsonpath_object 
------------------
 13
(1 row)

select * from _jsonpath_object('[12, {"a": 13}, {"b": 14}, "ccc", true]', '$.[2.5 - 1 to @.size() - 2]');
 _jsonpath_object 
------------------
 {"a": 13}
 {"b": 14}
 "ccc"
(3 rows)

select * from _jsonpath_object('1', 'lax $[0]');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('1', 'lax $[*]');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('[1]', 'lax $[0]');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('[1]', 'lax $[*]');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('[1,2,3]', 'lax $[*]');
 _jsonpath_object 
------------------
 1
 2
 3
(3 rows)

select * from _jsonpath_object('[]', '$[last]');
ERROR:  Invalid SQL/JSON subscript
select * from _jsonpath_object('[1]', '$[last]');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('[1,2,3]', '$[last]');
 _jsonpath_object 
------------------
 3
(1 row)

select * from _jsonpath_object('[1,2,3]', '$[last - 1]');
 _jsonpath_object 
------------------
 2
(1 row)

select * from _jsonpath_object('[1,2,3]', '$[last ? (@.type() == "number")]');
 _jsonpath_object 
------------------
 3
(1 row)

select * from _jsonpath_object('[1,2,3]', '$[last ? (@.type() == "string")]');
ERROR:  Invalid SQL/JSON subscript
select * from _jsonpath_object('{"a": 10}', '$');
 _jsonpath_object 
------------------
 {"a": 10}
(1 row)

select * from _jsonpath_object('{"a": 10}', '$ ? (.a < $value)');
ERROR:  could not find 'value' passed variable
select * from _jsonpath_object('{"a": 10}', '$ ? (.a < $value)', '{"value" : 13}');
 _jsonpath_object 
------------------
 {"a": 10}
(1 row)

select * from _jsonpath_object('{"a": 10}', '$ ? (.a < $value)', '{"value" : 8}');
 _jsonpath_object 
------------------
(0 rows)

select * from _jsonpath_object('{"a": 10}', '$.a ? (@ < $value)', '{"value" : 13}');
 _jsonpath_object 
------------------
 10
(1 row)

select * from _jsonpath_object('[10,11,12,13,14,15]', '$.[*] ? (@ < $value)', '{"value" : 13}');
 _jsonpath_object 
------------------
 10
 11
 12
(3 rows)

select * from _jsonpath_object('[10,11,12,13,14,15]', '$.[0,1] ? (@ < $value)', '{"value" : 13}');
 _jsonpath_object 
------------------
 10
 11
(2 rows)

select * from _jsonpath_object('[10,11,12,13,14,15]', '$.[0 to 2] ? (@ < $value)', '{"value" : 15}');
 _jsonpath_object 
------------------
 10
 11
 12
(3 rows)

select * from _jsonpath_object('[1,"1",2,"2",null]', '$.[*] ? (@ == "1")');
 _jsonpath_object 
------------------
 "1"
(1 row)

select * from _jsonpath_object('[1,"1",2,"2",null]', '$.[*] ? (@ == $value)', '{"value" : "1"}');
 _jsonpath_object 
------------------
 "1"
(1 row)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**');
 _jsonpath_object 
------------------
 {"a": {"b": 1}}
 {"b": 1}
 1
(3 rows)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**{1}');
 _jsonpath_object 
------------------
 {"b": 1}
(1 row)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**{1,}');
 _jsonpath_object 
------------------
 {"b": 1}
 1
(2 rows)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**{2}');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**{2,}');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**{3,}');
 _jsonpath_object 
------------------
(0 rows)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**.b ? (@ > 0)');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**{0}.b ? (@ > 0)');
 _jsonpath_object 
------------------
(0 rows)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**{1}.b ? (@ > 0)');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**{0,}.b ? (@ > 0)');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**{1,}.b ? (@ > 0)');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"b": 1}}', 'lax $.**{1,2}.b ? (@ > 0)');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"c": {"b": 1}}}', 'lax $.**.b ? (@ > 0)');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"c": {"b": 1}}}', 'lax $.**{0}.b ? (@ > 0)');
 _jsonpath_object 
------------------
(0 rows)

select * from _jsonpath_object('{"a": {"c": {"b": 1}}}', 'lax $.**{1}.b ? (@ > 0)');
 _jsonpath_object 
------------------
(0 rows)

select * from _jsonpath_object('{"a": {"c": {"b": 1}}}', 'lax $.**{0,}.b ? (@ > 0)');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"c": {"b": 1}}}', 'lax $.**{1,}.b ? (@ > 0)');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"c": {"b": 1}}}', 'lax $.**{1,2}.b ? (@ > 0)');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_object('{"a": {"c": {"b": 1}}}', 'lax $.**{2,3}.b ? (@ > 0)');
 _jsonpath_object 
------------------
 1
(1 row)

select * from _jsonpath_exists('{"a": {"b": 1}}', '$.**.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

select * from _jsonpath_exists('{"a": {"b": 1}}', '$.**{0}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 f
(1 row)

select * from _jsonpath_exists('{"a": {"b": 1}}', '$.**{1}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

select * from _jsonpath_exists('{"a": {"b": 1}}', '$.**{0,}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

select * from _jsonpath_exists('{"a": {"b": 1}}', '$.**{1,}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

select * from _jsonpath_exists('{"a": {"b": 1}}', '$.**{1,2}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

select * from _jsonpath_exists('{"a": {"c": {"b": 1}}}', '$.**.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

select * from _jsonpath_exists('{"a": {"c": {"b": 1}}}', '$.**{0}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 f
(1 row)

select * from _jsonpath_exists('{"a": {"c": {"b": 1}}}', '$.**{1}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 f
(1 row)

select * from _jsonpath_exists('{"a": {"c": {"b": 1}}}', '$.**{0,}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

select * from _jsonpath_exists('{"a": {"c": {"b": 1}}}', '$.**{1,}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

select * from _jsonpath_exists('{"a": {"c": {"b": 1}}}', '$.**{1,2}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

select * from _jsonpath_exists('{"a": {"c": {"b": 1}}}', '$.**{2,3}.b ? (@ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_object('{"g": {"x": 2}}', '$.g ? (exists (@.x))');
 _jsonpath_object 
------------------
 {"x": 2}
(1 row)

select _jsonpath_object('{"g": {"x": 2}}', '$.g ? (exists (@.y))');
 _jsonpath_object 
------------------
(0 rows)

select _jsonpath_object('{"g": {"x": 2}}', '$.g ? (exists (@.x ? (@ >= 2)))');
 _jsonpath_object 
------------------
 {"x": 2}
(1 row)

select _jsonpath_exists('{"a": 1, "b":1}', '$ ? (.a == .b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"c": {"a": 1, "b":1}}', '$ ? (.a == .b)');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('{"c": {"a": 1, "b":1}}', '$.c ? (.a == .b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"c": {"a": 1, "b":1}}', '$.c ? ($.c.a == .b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"c": {"a": 1, "b":1}}', '$.* ? (.a == .b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"a": 1, "b":1}', '$.** ? (.a == .b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"c": {"a": 1, "b":1}}', '$.** ? (.a == .b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_object('{"c": {"a": 2, "b":1}}', '$.** ? (.a == 1 + 1)');
 _jsonpath_object 
------------------
 {"a": 2, "b": 1}
(1 row)

select _jsonpath_object('{"c": {"a": 2, "b":1}}', '$.** ? (.a == (1 + 1))');
 _jsonpath_object 
------------------
 {"a": 2, "b": 1}
(1 row)

select _jsonpath_object('{"c": {"a": 2, "b":1}}', '$.** ? (.a == .b + 1)');
 _jsonpath_object 
------------------
 {"a": 2, "b": 1}
(1 row)

select _jsonpath_object('{"c": {"a": 2, "b":1}}', '$.** ? (.a == (.b + 1))');
 _jsonpath_object 
------------------
 {"a": 2, "b": 1}
(1 row)

select _jsonpath_exists('{"c": {"a": -1, "b":1}}', '$.** ? (.a == - 1)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"c": {"a": -1, "b":1}}', '$.** ? (.a == -1)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"c": {"a": -1, "b":1}}', '$.** ? (.a == -.b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"c": {"a": -1, "b":1}}', '$.** ? (.a == - .b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"c": {"a": 0, "b":1}}', '$.** ? (.a == 1 - .b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"c": {"a": 2, "b":1}}', '$.** ? (.a == 1 - - .b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('{"c": {"a": 0, "b":1}}', '$.** ? (.a == 1 - +.b)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('[1,2,3]', '$ ? (+@[*] > +2)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('[1,2,3]', '$ ? (+@[*] > +3)');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('[1,2,3]', '$ ? (-@[*] < -2)');
 _jsonpath_exists 
------------------
 t
(1 row)

select _jsonpath_exists('[1,2,3]', '$ ? (-@[*] < -3)');
 _jsonpath_exists 
------------------
 f
(1 row)

select _jsonpath_exists('1', '$ ? ($ > 0)');
 _jsonpath_exists 
------------------
 t
(1 row)

-- extension: boolean expressions
select _jsonpath_object('2', '$ > 1');
 _jsonpath_object 
------------------
 true
(1 row)

select _jsonpath_object('2', '$ <= 1');
 _jsonpath_object 
------------------
 false
(1 row)

select _jsonpath_object('2', '$ == "2"');
 _jsonpath_object 
------------------
 null
(1 row)

select _jsonpath_predicate('2', '$ > 1');
 _jsonpath_predicate 
---------------------
 t
(1 row)

select _jsonpath_predicate('2', '$ <= 1');
 _jsonpath_predicate 
---------------------
 f
(1 row)

select _jsonpath_predicate('2', '$ == "2"');
 _jsonpath_predicate 
---------------------
 
(1 row)

select _jsonpath_predicate('2', '1');
 _jsonpath_predicate 
---------------------
 
(1 row)

select _jsonpath_predicate('{}', '$');
 _jsonpath_predicate 
---------------------
 
(1 row)

select _jsonpath_predicate('[]', '$');
 _jsonpath_predicate 
---------------------
 
(1 row)

select _jsonpath_predicate('[1,2,3]', '$[*]');
ERROR:  Singleton SQL/JSON item required
select _jsonpath_predicate('[]', '$[*]');
ERROR:  Singleton SQL/JSON item required
select _jsonpath_predicate('[[1, true], [2, false]]', '$[*] ? (@[0] > $x) [1]', '{"x": 1}');
 _jsonpath_predicate 
---------------------
 f
(1 row)

select _jsonpath_predicate('[[1, true], [2, false]]', '$[*] ? (@[0] < $x) [1]', '{"x": 2}');
 _jsonpath_predicate 
---------------------
 t
(1 row)

select _jsonpath_object('[null,1,true,"a",[],{}]', '$.type()');
 _jsonpath_object 
------------------
 "array"
(1 row)

select _jsonpath_object('[null,1,true,"a",[],{}]', 'lax $.type()');
 _jsonpath_object 
------------------
 "array"
(1 row)

select _jsonpath_object('[null,1,true,"a",[],{}]', '$[*].type()');
 _jsonpath_object 
------------------
 "null"
 "number"
 "boolean"
 "string"
 "array"
 "object"
(6 rows)

select _jsonpath_object('null', 'null.type()');
 _jsonpath_object 
------------------
 "null"
(1 row)

select _jsonpath_object('null', 'true.type()');
 _jsonpath_object 
------------------
 "boolean"
(1 row)

select _jsonpath_object('null', '123.type()');
 _jsonpath_object 
------------------
 "number"
(1 row)

select _jsonpath_object('null', '"123".type()');
 _jsonpath_object 
------------------
 "string"
(1 row)

select _jsonpath_object('null', 'aaa.type()');
 _jsonpath_object 
------------------
 "string"
(1 row)

select _jsonpath_object('{"a": 2}', '($.a - 5).abs() + 10');
 _jsonpath_object 
------------------
 13
(1 row)

select _jsonpath_object('{"a": 2.5}', '-($.a * $.a).floor() + 10');
 _jsonpath_object 
------------------
 4
(1 row)

select _jsonpath_object('[1, 2, 3]', '($[*] > 2) ? (@ == true)');
 _jsonpath_object 
------------------
 true
(1 row)

select _jsonpath_object('[1, 2, 3]', '($[*] > 3).type()');
 _jsonpath_object 
------------------
 "boolean"
(1 row)

select _jsonpath_object('[1, 2, 3]', '($[*].a > 3).type()');
 _jsonpath_object 
------------------
 "null"
(1 row)

select _jsonpath_object('[1,null,true,"11",[],[1],[1,2,3],{},{"a":1,"b":2}]', '$[*].size()');
ERROR:  SQL/JSON array not found
select _jsonpath_object('[1,null,true,"11",[],[1],[1,2,3],{},{"a":1,"b":2}]', 'lax $[*].size()');
 _jsonpath_object 
------------------
 1
 1
 1
 1
 0
 1
 3
 1
 1
(9 rows)

select _jsonpath_object('[0, 1, -2, -3.4, 5.6]', '$[*].abs()');
 _jsonpath_object 
------------------
 0
 1
 2
 3.4
 5.6
(5 rows)

select _jsonpath_object('[0, 1, -2, -3.4, 5.6]', '$[*].floor()');
 _jsonpath_object 
------------------
 0
 1
 -2
 -4
 5
(5 rows)

select _jsonpath_object('[0, 1, -2, -3.4, 5.6]', '$[*].ceiling()');
 _jsonpath_object 
------------------
 0
 1
 -2
 -3
 6
(5 rows)

select _jsonpath_object('[0, 1, -2, -3.4, 5.6]', '$[*].ceiling().abs()');
 _jsonpath_object 
------------------
 0
 1
 2
 3
 6
(5 rows)

select _jsonpath_object('[0, 1, -2, -3.4, 5.6]', '$[*].ceiling().abs().type()');
 _jsonpath_object 
------------------
 "number"
 "number"
 "number"
 "number"
 "number"
(5 rows)

select _jsonpath_object('[{},1]', '$[*].keyvalue()');
ERROR:  SQL/JSON object not found
select _jsonpath_object('{}', '$.keyvalue()');
 _jsonpath_object 
------------------
(0 rows)

select _jsonpath_object('{"a": 1, "b": [1, 2], "c": {"a": "bbb"}}', '$.keyvalue()');
          _jsonpath_object           
-------------------------------------
 {"key": "a", "value": 1}
 {"key": "b", "value": [1, 2]}
 {"key": "c", "value": {"a": "bbb"}}
(3 rows)

select _jsonpath_object('[{"a": 1, "b": [1, 2]}, {"c": {"a": "bbb"}}]', '$[*].keyvalue()');
          _jsonpath_object           
-------------------------------------
 {"key": "a", "value": 1}
 {"key": "b", "value": [1, 2]}
 {"key": "c", "value": {"a": "bbb"}}
(3 rows)

select _jsonpath_object('[{"a": 1, "b": [1, 2]}, {"c": {"a": "bbb"}}]', 'strict $.keyvalue()');
ERROR:  SQL/JSON object not found
select _jsonpath_object('[{"a": 1, "b": [1, 2]}, {"c": {"a": "bbb"}}]', 'lax $.keyvalue()');
          _jsonpath_object           
-------------------------------------
 {"key": "a", "value": 1}
 {"key": "b", "value": [1, 2]}
 {"key": "c", "value": {"a": "bbb"}}
(3 rows)

select _jsonpath_object('null', '$.double()');
ERROR:  Non-numeric SQL/JSON item
select _jsonpath_object('true', '$.double()');
ERROR:  Non-numeric SQL/JSON item
select _jsonpath_object('[]', '$.double()');
ERROR:  Non-numeric SQL/JSON item
select _jsonpath_object('{}', '$.double()');
ERROR:  Non-numeric SQL/JSON item
select _jsonpath_object('1.23', '$.double()');
 _jsonpath_object 
------------------
 1.23
(1 row)

select _jsonpath_object('"1.23"', '$.double()');
 _jsonpath_object 
------------------
 1.23
(1 row)

select _jsonpath_object('"1.23aaa"', '$.double()');
ERROR:  Non-numeric SQL/JSON item
select _jsonpath_object('["", "a", "abc", "abcabc"]', '$[*] ? (@ starts with "abc")');
 _jsonpath_object 
------------------
 "abc"
 "abcabc"
(2 rows)

select _jsonpath_object('["", "a", "abc", "abcabc"]', 'strict $ ? (@[*] starts with "abc")');
      _jsonpath_object      
----------------------------
 ["", "a", "abc", "abcabc"]
(1 row)

select _jsonpath_object('["", "a", "abd", "abdabc"]', 'strict $ ? (@[*] starts with "abc")');
 _jsonpath_object 
------------------
(0 rows)

select _jsonpath_object('["abc", "abcabc", null, 1]', 'strict $ ? (@[*] starts with "abc")');
 _jsonpath_object 
------------------
(0 rows)

select _jsonpath_object('["abc", "abcabc", null, 1]', 'strict $ ? ((@[*] starts with "abc") is unknown)');
      _jsonpath_object      
----------------------------
 ["abc", "abcabc", null, 1]
(1 row)

select _jsonpath_object('[[null, 1, "abc", "abcabc"]]', 'lax $ ? (@[*] starts with "abc")');
      _jsonpath_object      
----------------------------
 [null, 1, "abc", "abcabc"]
(1 row)

select _jsonpath_object('[[null, 1, "abd", "abdabc"]]', 'lax $ ? ((@[*] starts with "abc") is unknown)');
      _jsonpath_object      
----------------------------
 [null, 1, "abd", "abdabc"]
(1 row)

select _jsonpath_object('[null, 1, "abd", "abdabc"]', 'lax $[*] ? ((@ starts with "abc") is unknown)');
 _jsonpath_object 
------------------
 null
 1
(2 rows)

select _jsonpath_object('null', '$.datetime()');
ERROR:  Invalid argument for SQL/JSON datetime function
select _jsonpath_object('true', '$.datetime()');
ERROR:  Invalid argument for SQL/JSON datetime function
select _jsonpath_object('[]', '$.datetime()');
ERROR:  Invalid argument for SQL/JSON datetime function
select _jsonpath_object('{}', '$.datetime()');
ERROR:  Invalid argument for SQL/JSON datetime function
select _jsonpath_object('""', '$.datetime()');
ERROR:  Invalid argument for SQL/JSON datetime function
-- Standard extension: UNIX epoch to timestamptz
select _jsonpath_object('0', '$.datetime()');
        _jsonpath_object        
--------------------------------
 "Wed Dec 31 16:00:00 1969 PST"
(1 row)

select _jsonpath_object('0', '$.datetime().type()');
      _jsonpath_object      
----------------------------
 "timestamp with time zone"
(1 row)

select _jsonpath_object('1490216035.5', '$.datetime()');
         _jsonpath_object         
----------------------------------
 "Wed Mar 22 13:53:55.5 2017 PDT"
(1 row)

select _jsonpath_object('"10-03-2017"',       '$.datetime("dd-mm-yyyy")');
 _jsonpath_object 
------------------
 "03-10-2017"
(1 row)

select _jsonpath_object('"10-03-2017"',       '$.datetime("dd-mm-yyyy").type()');
 _jsonpath_object 
------------------
 "date"
(1 row)

select _jsonpath_object('"10-03-2017 12:34"', '$.datetime("dd-mm-yyyy")');
 _jsonpath_object 
------------------
 "03-10-2017"
(1 row)

select _jsonpath_object('"10-03-2017 12:34"', '$.datetime("dd-mm-yyyy").type()');
 _jsonpath_object 
------------------
 "date"
(1 row)

select _jsonpath_object('"10-03-2017 12:34"', '       $.datetime("dd-mm-yyyy HH24:MI").type()');
       _jsonpath_object        
-------------------------------
 "timestamp without time zone"
(1 row)

select _jsonpath_object('"10-03-2017 12:34 +05:20"', '$.datetime("dd-mm-yyyy HH24:MI TZH:TZM").type()');
      _jsonpath_object      
----------------------------
 "timestamp with time zone"
(1 row)

select _jsonpath_object('"12:34:56"',                '$.datetime("HH24:MI:SS").type()');
     _jsonpath_object     
--------------------------
 "time without time zone"
(1 row)

select _jsonpath_object('"12:34:56 +05:20"',         '$.datetime("HH24:MI:SS TZH:TZM").type()');
   _jsonpath_object    
-----------------------
 "time with time zone"
(1 row)

set time zone '+00';
select _jsonpath_object('"10-03-2017 12:34"',        '$.datetime("dd-mm-yyyy HH24:MI")');
      _jsonpath_object      
----------------------------
 "Fri Mar 10 12:34:00 2017"
(1 row)

select _jsonpath_object('"10-03-2017 12:34"',        '$.datetime("dd-mm-yyyy HH24:MI TZH")');
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 12:34:00 2017 +00"
(1 row)

select _jsonpath_object('"10-03-2017 12:34 +05"',    '$.datetime("dd-mm-yyyy HH24:MI TZH")');
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 07:34:00 2017 +00"
(1 row)

select _jsonpath_object('"10-03-2017 12:34 -05"',    '$.datetime("dd-mm-yyyy HH24:MI TZH")');
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 17:34:00 2017 +00"
(1 row)

select _jsonpath_object('"10-03-2017 12:34 +05:20"', '$.datetime("dd-mm-yyyy HH24:MI TZH:TZM")');
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 07:14:00 2017 +00"
(1 row)

select _jsonpath_object('"10-03-2017 12:34 -05:20"', '$.datetime("dd-mm-yyyy HH24:MI TZH:TZM")');
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 17:54:00 2017 +00"
(1 row)

select _jsonpath_object('"12:34"',       '$.datetime("HH24:MI")');
 _jsonpath_object 
------------------
 "12:34:00"
(1 row)

select _jsonpath_object('"12:34"',       '$.datetime("HH24:MI TZH")');
 _jsonpath_object 
------------------
 "12:34:00+00"
(1 row)

select _jsonpath_object('"12:34 +05"',    '$.datetime("HH24:MI TZH")');
 _jsonpath_object 
------------------
 "12:34:00+05"
(1 row)

select _jsonpath_object('"12:34 -05"',    '$.datetime("HH24:MI TZH")');
 _jsonpath_object 
------------------
 "12:34:00-05"
(1 row)

select _jsonpath_object('"12:34 +05:20"', '$.datetime("HH24:MI TZH:TZM")');
 _jsonpath_object 
------------------
 "12:34:00+05:20"
(1 row)

select _jsonpath_object('"12:34 -05:20"', '$.datetime("HH24:MI TZH:TZM")');
 _jsonpath_object 
------------------
 "12:34:00-05:20"
(1 row)

set time zone '+10';
select _jsonpath_object('"10-03-2017 12:34"',       '$.datetime("dd-mm-yyyy HH24:MI")');
      _jsonpath_object      
----------------------------
 "Fri Mar 10 12:34:00 2017"
(1 row)

select _jsonpath_object('"10-03-2017 12:34"',        '$.datetime("dd-mm-yyyy HH24:MI TZH")');
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 12:34:00 2017 +10"
(1 row)

select _jsonpath_object('"10-03-2017 12:34 +05"',    '$.datetime("dd-mm-yyyy HH24:MI TZH")');
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 17:34:00 2017 +10"
(1 row)

select _jsonpath_object('"10-03-2017 12:34 -05"',    '$.datetime("dd-mm-yyyy HH24:MI TZH")');
        _jsonpath_object        
--------------------------------
 "Sat Mar 11 03:34:00 2017 +10"
(1 row)

select _jsonpath_object('"10-03-2017 12:34 +05:20"', '$.datetime("dd-mm-yyyy HH24:MI TZH:TZM")');
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 17:14:00 2017 +10"
(1 row)

select _jsonpath_object('"10-03-2017 12:34 -05:20"', '$.datetime("dd-mm-yyyy HH24:MI TZH:TZM")');
        _jsonpath_object        
--------------------------------
 "Sat Mar 11 03:54:00 2017 +10"
(1 row)

select _jsonpath_object('"12:34"',        '$.datetime("HH24:MI")');
 _jsonpath_object 
------------------
 "12:34:00"
(1 row)

select _jsonpath_object('"12:34"',        '$.datetime("HH24:MI TZH")');
 _jsonpath_object 
------------------
 "12:34:00+10"
(1 row)

select _jsonpath_object('"12:34 +05"',    '$.datetime("HH24:MI TZH")');
 _jsonpath_object 
------------------
 "12:34:00+05"
(1 row)

select _jsonpath_object('"12:34 -05"',    '$.datetime("HH24:MI TZH")');
 _jsonpath_object 
------------------
 "12:34:00-05"
(1 row)

select _jsonpath_object('"12:34 +05:20"', '$.datetime("HH24:MI TZH:TZM")');
 _jsonpath_object 
------------------
 "12:34:00+05:20"
(1 row)

select _jsonpath_object('"12:34 -05:20"', '$.datetime("HH24:MI TZH:TZM")');
 _jsonpath_object 
------------------
 "12:34:00-05:20"
(1 row)

set time zone default;
select _jsonpath_object('"2017-03-10"', '$.datetime().type()');
 _jsonpath_object 
------------------
 "date"
(1 row)

select _jsonpath_object('"2017-03-10"', '$.datetime()');
 _jsonpath_object 
------------------
 "03-10-2017"
(1 row)

select _jsonpath_object('"2017-03-10 12:34:56"', '$.datetime().type()');
       _jsonpath_object        
-------------------------------
 "timestamp without time zone"
(1 row)

select _jsonpath_object('"2017-03-10 12:34:56"', '$.datetime()');
      _jsonpath_object      
----------------------------
 "Fri Mar 10 12:34:56 2017"
(1 row)

select _jsonpath_object('"2017-03-10 12:34:56 +3"', '$.datetime().type()');
      _jsonpath_object      
----------------------------
 "timestamp with time zone"
(1 row)

select _jsonpath_object('"2017-03-10 12:34:56 +3"', '$.datetime()');
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 01:34:56 2017 PST"
(1 row)

select _jsonpath_object('"2017-03-10 12:34:56 +3:10"', '$.datetime().type()');
      _jsonpath_object      
----------------------------
 "timestamp with time zone"
(1 row)

select _jsonpath_object('"2017-03-10 12:34:56 +3:10"', '$.datetime()');
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 01:24:56 2017 PST"
(1 row)

select _jsonpath_object('"12:34:56"', '$.datetime().type()');
     _jsonpath_object     
--------------------------
 "time without time zone"
(1 row)

select _jsonpath_object('"12:34:56"', '$.datetime()');
 _jsonpath_object 
------------------
 "12:34:56"
(1 row)

select _jsonpath_object('"12:34:56 +3"', '$.datetime().type()');
   _jsonpath_object    
-----------------------
 "time with time zone"
(1 row)

select _jsonpath_object('"12:34:56 +3"', '$.datetime()');
 _jsonpath_object 
------------------
 "12:34:56+03"
(1 row)

select _jsonpath_object('"12:34:56 +3:10"', '$.datetime().type()');
   _jsonpath_object    
-----------------------
 "time with time zone"
(1 row)

select _jsonpath_object('"12:34:56 +3:10"', '$.datetime()');
 _jsonpath_object 
------------------
 "12:34:56+03:10"
(1 row)

-- date comparison
select _jsonpath_object(
	'["10.03.2017", "11.03.2017", "09.03.2017"]',
	'$[*].datetime("dd.mm.yyyy") ? (@ == "10.03.2017".datetime("dd.mm.yyyy"))'
);
 _jsonpath_object 
------------------
 "03-10-2017"
(1 row)

select _jsonpath_object(
	'["10.03.2017", "11.03.2017", "09.03.2017"]',
	'$[*].datetime("dd.mm.yyyy") ? (@ >= "10.03.2017".datetime("dd.mm.yyyy"))'
);
 _jsonpath_object 
------------------
 "03-10-2017"
 "03-11-2017"
(2 rows)

select _jsonpath_object(
	'["10.03.2017", "11.03.2017", "09.03.2017"]',
	'$[*].datetime("dd.mm.yyyy") ? (@ <  "10.03.2017".datetime("dd.mm.yyyy"))'
);
 _jsonpath_object 
------------------
 "03-09-2017"
(1 row)

-- time comparison
select _jsonpath_object(
	'["12:34", "12:35", "12:36"]',
	'$[*].datetime("HH24:MI") ? (@ == "12:35".datetime("HH24:MI"))'
);
 _jsonpath_object 
------------------
 "12:35:00"
(1 row)

select _jsonpath_object(
	'["12:34", "12:35", "12:36"]',
	'$[*].datetime("HH24:MI") ? (@ >= "12:35".datetime("HH24:MI"))'
);
 _jsonpath_object 
------------------
 "12:35:00"
 "12:36:00"
(2 rows)

select _jsonpath_object(
	'["12:34", "12:35", "12:36"]',
	'$[*].datetime("HH24:MI") ? (@ <  "12:35".datetime("HH24:MI"))'
);
 _jsonpath_object 
------------------
 "12:34:00"
(1 row)

-- timetz comparison
select _jsonpath_object(
	'["12:34 +1", "12:35 +1", "12:36 +1", "12:35 +2", "12:35 -2"]',
	'$[*].datetime("HH24:MI TZH") ? (@ == "12:35 +1".datetime("HH24:MI TZH"))'
);
 _jsonpath_object 
------------------
 "12:35:00+01"
(1 row)

select _jsonpath_object(
	'["12:34 +1", "12:35 +1", "12:36 +1", "12:35 +2", "12:35 -2"]',
	'$[*].datetime("HH24:MI TZH") ? (@ >= "12:35 +1".datetime("HH24:MI TZH"))'
);
 _jsonpath_object 
------------------
 "12:35:00+01"
 "12:36:00+01"
 "12:35:00-02"
(3 rows)

select _jsonpath_object(
	'["12:34 +1", "12:35 +1", "12:36 +1", "12:35 +2", "12:35 -2"]',
	'$[*].datetime("HH24:MI TZH") ? (@ <  "12:35 +1".datetime("HH24:MI TZH"))'
);
 _jsonpath_object 
------------------
 "12:34:00+01"
 "12:35:00+02"
(2 rows)

-- timestamp comparison
select _jsonpath_object(
	'["10.03.2017 12:34", "10.03.2017 12:35", "10.03.2017 12:36"]',
	'$[*].datetime("dd.mm.yyyy HH24:MI") ? (@ == "10.03.2017 12:35".datetime("dd.mm.yyyy HH24:MI"))'
);
      _jsonpath_object      
----------------------------
 "Fri Mar 10 12:35:00 2017"
(1 row)

select _jsonpath_object(
	'["10.03.2017 12:34", "10.03.2017 12:35", "10.03.2017 12:36"]',
	'$[*].datetime("dd.mm.yyyy HH24:MI") ? (@ >= "10.03.2017 12:35".datetime("dd.mm.yyyy HH24:MI"))'
);
      _jsonpath_object      
----------------------------
 "Fri Mar 10 12:35:00 2017"
 "Fri Mar 10 12:36:00 2017"
(2 rows)

select _jsonpath_object(
	'["10.03.2017 12:34", "10.03.2017 12:35", "10.03.2017 12:36"]',
	'$[*].datetime("dd.mm.yyyy HH24:MI") ? (@ < "10.03.2017 12:35".datetime("dd.mm.yyyy HH24:MI"))'
);
      _jsonpath_object      
----------------------------
 "Fri Mar 10 12:34:00 2017"
(1 row)

-- timestamptz compasison
select _jsonpath_object(
	'["10.03.2017 12:34 +1", "10.03.2017 12:35 +1", "10.03.2017 12:36 +1", "10.03.2017 12:35 +2", "10.03.2017 12:35 -2"]',
	'$[*].datetime("dd.mm.yyyy HH24:MI TZH") ? (@ == "10.03.2017 12:35 +1".datetime("dd.mm.yyyy HH24:MI TZH"))'
);
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 03:35:00 2017 PST"
(1 row)

select _jsonpath_object(
	'["10.03.2017 12:34 +1", "10.03.2017 12:35 +1", "10.03.2017 12:36 +1", "10.03.2017 12:35 +2", "10.03.2017 12:35 -2"]',
	'$[*].datetime("dd.mm.yyyy HH24:MI TZH") ? (@ >= "10.03.2017 12:35 +1".datetime("dd.mm.yyyy HH24:MI TZH"))'
);
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 03:35:00 2017 PST"
 "Fri Mar 10 03:36:00 2017 PST"
 "Fri Mar 10 06:35:00 2017 PST"
(3 rows)

select _jsonpath_object(
	'["10.03.2017 12:34 +1", "10.03.2017 12:35 +1", "10.03.2017 12:36 +1", "10.03.2017 12:35 +2", "10.03.2017 12:35 -2"]',
	'$[*].datetime("dd.mm.yyyy HH24:MI TZH") ? (@ < "10.03.2017 12:35 +1".datetime("dd.mm.yyyy HH24:MI TZH"))'
);
        _jsonpath_object        
--------------------------------
 "Fri Mar 10 03:34:00 2017 PST"
 "Fri Mar 10 02:35:00 2017 PST"
(2 rows)

-- extension: map item method
select _jsonpath_object('1', 'strict $.map(@ + 10)');
ERROR:  SQL/JSON array not found
select _jsonpath_object('1', 'lax $.map(@ + 10)');
 _jsonpath_object 
------------------
 11
(1 row)

select _jsonpath_object('[1, 2, 3]', '$.map(@ + 10)');
 _jsonpath_object 
------------------
 [11, 12, 13]
(1 row)

select _jsonpath_object('[[1, 2], [3, 4, 5], [], [6, 7]]', '$.map(@.map(@ + 10))');
            _jsonpath_object            
----------------------------------------
 [[11, 12], [13, 14, 15], [], [16, 17]]
(1 row)

-- extension: reduce/fold item methods
select _jsonpath_object('1', 'strict $.reduce($1 + $2)');
ERROR:  SQL/JSON array not found
select _jsonpath_object('1', 'lax $.reduce($1 + $2)');
 _jsonpath_object 
------------------
 1
(1 row)

select _jsonpath_object('[1, 2, 3]', '$.reduce($1 + $2)');
 _jsonpath_object 
------------------
 6
(1 row)

select _jsonpath_object('[1, 2, 3]', '$.fold($1 + $2, 100)');
 _jsonpath_object 
------------------
 106
(1 row)

select _jsonpath_object('[]', '$.reduce($1 + $2)');
 _jsonpath_object 
------------------
(0 rows)

select _jsonpath_object('[]', '$.fold($1 + $2, 100)');
 _jsonpath_object 
------------------
 100
(1 row)

select _jsonpath_object('[1]', '$.reduce($1 + $2)');
 _jsonpath_object 
------------------
 1
(1 row)

select _jsonpath_object('[1, 2, 3]', '$.foldl([$1, $2], [])');
 _jsonpath_object  
-------------------
 [[[[], 1], 2], 3]
(1 row)

select _jsonpath_object('[1, 2, 3]', '$.foldr([$2, $1], [])');
 _jsonpath_object  
-------------------
 [[[[], 3], 2], 1]
(1 row)

select _jsonpath_object('[[1, 2], [3, 4, 5], [], [6, 7]]', '$.fold($1 + $2.fold($1 + $2, 100), 1000)');
 _jsonpath_object 
------------------
 1428
(1 row)

-- extension: path sequences
select _jsonpath_object('[1,2,3,4,5]', '10, 20, $[*], 30');
 _jsonpath_object 
------------------
 10
 20
 1
 2
 3
 4
 5
 30
(8 rows)

select _jsonpath_object('[1,2,3,4,5]', 'lax    10, 20, $[*].a, 30');
 _jsonpath_object 
------------------
 10
 20
 30
(3 rows)

select _jsonpath_object('[1,2,3,4,5]', 'strict 10, 20, $[*].a, 30');
ERROR:  SQL/JSON member not found
select _jsonpath_object('[1,2,3,4,5]', '-(10, 20, $[1 to 3], 30)');
 _jsonpath_object 
------------------
 -10
 -20
 -2
 -3
 -4
 -30
(6 rows)

select _jsonpath_object('[1,2,3,4,5]', 'lax (10, 20, $[1 to 3], 30).map(@ + 100)');
 _jsonpath_object 
------------------
 110
 120
 102
 103
 104
 130
(6 rows)

select _jsonpath_object('[1,2,3,4,5]', '$[(0, $[*], 5) ? (@ == 3)]');
 _jsonpath_object 
------------------
 4
(1 row)

select _jsonpath_object('[1,2,3,4,5]', '$[(0, $[*], 3) ? (@ == 3)]');
ERROR:  Invalid SQL/JSON subscript
-- extension: array constructors
select _jsonpath_object('[1, 2, 3]', '[]');
 _jsonpath_object 
------------------
 []
(1 row)

select _jsonpath_object('[1, 2, 3]', '[1, 2, $.map(@ + 100)[*], 4, 5]');
      _jsonpath_object       
-----------------------------
 [1, 2, 101, 102, 103, 4, 5]
(1 row)

select _jsonpath_object('[1, 2, 3]', '[1, 2, $.map(@ + 100)[*], 4, 5][*]');
 _jsonpath_object 
------------------
 1
 2
 101
 102
 103
 4
 5
(7 rows)

select _jsonpath_object('[1, 2, 3]', '[(1, (2, $.map(@ + 100)[*])), (4, 5)]');
      _jsonpath_object       
-----------------------------
 [1, 2, 101, 102, 103, 4, 5]
(1 row)

select _jsonpath_object('[1, 2, 3]', '[[1, 2], [$.map(@ + 100)[*], 4], 5, [(1,2)?(@ > 5)]]');
          _jsonpath_object           
-------------------------------------
 [[1, 2], [101, 102, 103, 4], 5, []]
(1 row)

select _jsonpath_object('[1, 2, 3]', 'strict [1, 2, $.map(@.a)[*], 4, 5]');
ERROR:  SQL/JSON member not found
select _jsonpath_object('[[1, 2], [3, 4, 5], [], [6, 7]]', '[$[*].map(@ + 10)[*] ? (@ > 13)]');
 _jsonpath_object 
------------------
 [14, 15, 16, 17]
(1 row)

-- extension: object constructors
select _jsonpath_object('[1, 2, 3]', '{}');
 _jsonpath_object 
------------------
 {}
(1 row)

select _jsonpath_object('[1, 2, 3]', '{a: 2 + 3, "b": [$[*], 4, 5]}');
        _jsonpath_object        
--------------------------------
 {"a": 5, "b": [1, 2, 3, 4, 5]}
(1 row)

select _jsonpath_object('[1, 2, 3]', '{a: 2 + 3, "b": [$[*], 4, 5]}.*');
 _jsonpath_object 
------------------
 5
 [1, 2, 3, 4, 5]
(2 rows)

select _jsonpath_object('[1, 2, 3]', '{a: 2 + 3, "b": ($[*], 4, 5)}');
ERROR:  Singleton SQL/JSON item required
select _jsonpath_object('[1, 2, 3]', '{a: 2 + 3, "b": [$.map({x: @, y: @ < 3})[*], {z: "foo"}]}');
                                       _jsonpath_object                                        
-----------------------------------------------------------------------------------------------
 {"a": 5, "b": [{"x": 1, "y": true}, {"x": 2, "y": true}, {"x": 3, "y": false}, {"z": "foo"}]}
(1 row)

--test ternary logic
select
	x, y,
	json_value(
		jsonb '[true, false, null]',
		'$[*] ? (@ == true  &&  ($x == true && $y == true) ||
				 @ == false && !($x == true && $y == true) ||
				 @ == null  &&  ($x == true && $y == true) is unknown)'
		passing x as x, y as y
	) as "x && y"
from
	(values (jsonb 'true'), ('false'), ('"null"')) x(x),
	(values (jsonb 'true'), ('false'), ('"null"')) y(y);
   x    |   y    | x && y 
--------+--------+--------
 true   | true   | true
 true   | false  | false
 true   | "null" | 
 false  | true   | false
 false  | false  | false
 false  | "null" | false
 "null" | true   | 
 "null" | false  | false
 "null" | "null" | 
(9 rows)

select
	x, y,
	json_value(
		jsonb '[true, false, null]',
		'$[*] ? (@ == true  &&  ($x == true || $y == true) ||
				 @ == false && !($x == true || $y == true) ||
				 @ == null  &&  ($x == true || $y == true) is unknown)'
		passing x as x, y as y
	) as "x || y"
from
	(values (jsonb 'true'), ('false'), ('"null"')) x(x),
	(values (jsonb 'true'), ('false'), ('"null"')) y(y);
   x    |   y    | x || y 
--------+--------+--------
 true   | true   | true
 true   | false  | true
 true   | "null" | true
 false  | true   | true
 false  | false  | false
 false  | "null" | 
 "null" | true   | true
 "null" | false  | 
 "null" | "null" | 
(9 rows)

